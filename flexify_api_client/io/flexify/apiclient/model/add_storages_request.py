# coding: utf-8

"""
    Flexify.IO User REST API

    + Generate access token via `/rest/auth` + Authorize in Swagger UI using `Bearer TOKEN` + Enjoy Flexify.IO REST API  # noqa: E501

    OpenAPI spec version: 2.4.2
    Contact: info@flexify.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flexify_api_client.io.flexify.apiclient.model.bucket import Bucket  # noqa: F401,E501


class AddStoragesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'buckets': 'list[Bucket]',
        'endpoint_id': 'int'
    }

    attribute_map = {
        'buckets': 'buckets',
        'endpoint_id': 'endpointId'
    }

    def __init__(self, buckets=None, endpoint_id=None):  # noqa: E501
        """AddStoragesRequest - a model defined in Swagger"""  # noqa: E501

        self._buckets = None
        self._endpoint_id = None
        self.discriminator = None

        self.buckets = buckets
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id

    @property
    def buckets(self):
        """Gets the buckets of this AddStoragesRequest.  # noqa: E501


        :return: The buckets of this AddStoragesRequest.  # noqa: E501
        :rtype: list[Bucket]
        """
        return self._buckets

    @buckets.setter
    def buckets(self, buckets):
        """Sets the buckets of this AddStoragesRequest.


        :param buckets: The buckets of this AddStoragesRequest.  # noqa: E501
        :type: list[Bucket]
        """
        if buckets is None:
            raise ValueError("Invalid value for `buckets`, must not be `None`")  # noqa: E501

        self._buckets = buckets

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this AddStoragesRequest.  # noqa: E501

        ID of the user endpoint to add storages to. Do not set the value if you want to attach storages to the endpoint later  # noqa: E501

        :return: The endpoint_id of this AddStoragesRequest.  # noqa: E501
        :rtype: int
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this AddStoragesRequest.

        ID of the user endpoint to add storages to. Do not set the value if you want to attach storages to the endpoint later  # noqa: E501

        :param endpoint_id: The endpoint_id of this AddStoragesRequest.  # noqa: E501
        :type: int
        """

        self._endpoint_id = endpoint_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddStoragesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
