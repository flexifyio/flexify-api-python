# coding: utf-8

"""
    Flexify.IO User REST API

    + Generate access token via `/rest/auth` + Authorize in Swagger UI using `Bearer TOKEN` + Enjoy Flexify.IO REST API  # noqa: E501

    OpenAPI spec version: 2.4.2
    Contact: info@flexify.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flexify_api_client.io.flexify.apiclient.model.migration_slot_stat import MigrationSlotStat  # noqa: F401,E501


class MigrationStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bytes_failed': 'int',
        'bytes_in_source': 'int',
        'bytes_processed': 'int',
        'bytes_removed_from_destination': 'int',
        'bytes_skipped': 'int',
        'bytes_uploaded': 'int',
        'created': 'datetime',
        'engines': 'int',
        'estimated': 'datetime',
        'finished': 'datetime',
        'objects_failed': 'int',
        'objects_in_source': 'int',
        'objects_processed': 'int',
        'objects_removed_from_destination': 'int',
        'objects_skipped': 'int',
        'objects_uploaded': 'int',
        'processing_objects_per_second': 'float',
        'progress': 'float',
        'retried': 'int',
        'slots': 'list[MigrationSlotStat]',
        'state': 'str',
        'step': 'str',
        'uploading_bytes_per_second': 'float'
    }

    attribute_map = {
        'bytes_failed': 'bytesFailed',
        'bytes_in_source': 'bytesInSource',
        'bytes_processed': 'bytesProcessed',
        'bytes_removed_from_destination': 'bytesRemovedFromDestination',
        'bytes_skipped': 'bytesSkipped',
        'bytes_uploaded': 'bytesUploaded',
        'created': 'created',
        'engines': 'engines',
        'estimated': 'estimated',
        'finished': 'finished',
        'objects_failed': 'objectsFailed',
        'objects_in_source': 'objectsInSource',
        'objects_processed': 'objectsProcessed',
        'objects_removed_from_destination': 'objectsRemovedFromDestination',
        'objects_skipped': 'objectsSkipped',
        'objects_uploaded': 'objectsUploaded',
        'processing_objects_per_second': 'processingObjectsPerSecond',
        'progress': 'progress',
        'retried': 'retried',
        'slots': 'slots',
        'state': 'state',
        'step': 'step',
        'uploading_bytes_per_second': 'uploadingBytesPerSecond'
    }

    def __init__(self, bytes_failed=None, bytes_in_source=None, bytes_processed=None, bytes_removed_from_destination=None, bytes_skipped=None, bytes_uploaded=None, created=None, engines=None, estimated=None, finished=None, objects_failed=None, objects_in_source=None, objects_processed=None, objects_removed_from_destination=None, objects_skipped=None, objects_uploaded=None, processing_objects_per_second=None, progress=None, retried=None, slots=None, state=None, step=None, uploading_bytes_per_second=None):  # noqa: E501
        """MigrationStat - a model defined in Swagger"""  # noqa: E501

        self._bytes_failed = None
        self._bytes_in_source = None
        self._bytes_processed = None
        self._bytes_removed_from_destination = None
        self._bytes_skipped = None
        self._bytes_uploaded = None
        self._created = None
        self._engines = None
        self._estimated = None
        self._finished = None
        self._objects_failed = None
        self._objects_in_source = None
        self._objects_processed = None
        self._objects_removed_from_destination = None
        self._objects_skipped = None
        self._objects_uploaded = None
        self._processing_objects_per_second = None
        self._progress = None
        self._retried = None
        self._slots = None
        self._state = None
        self._step = None
        self._uploading_bytes_per_second = None
        self.discriminator = None

        if bytes_failed is not None:
            self.bytes_failed = bytes_failed
        if bytes_in_source is not None:
            self.bytes_in_source = bytes_in_source
        if bytes_processed is not None:
            self.bytes_processed = bytes_processed
        if bytes_removed_from_destination is not None:
            self.bytes_removed_from_destination = bytes_removed_from_destination
        if bytes_skipped is not None:
            self.bytes_skipped = bytes_skipped
        if bytes_uploaded is not None:
            self.bytes_uploaded = bytes_uploaded
        if created is not None:
            self.created = created
        if engines is not None:
            self.engines = engines
        if estimated is not None:
            self.estimated = estimated
        if finished is not None:
            self.finished = finished
        if objects_failed is not None:
            self.objects_failed = objects_failed
        if objects_in_source is not None:
            self.objects_in_source = objects_in_source
        if objects_processed is not None:
            self.objects_processed = objects_processed
        if objects_removed_from_destination is not None:
            self.objects_removed_from_destination = objects_removed_from_destination
        if objects_skipped is not None:
            self.objects_skipped = objects_skipped
        if objects_uploaded is not None:
            self.objects_uploaded = objects_uploaded
        if processing_objects_per_second is not None:
            self.processing_objects_per_second = processing_objects_per_second
        if progress is not None:
            self.progress = progress
        if retried is not None:
            self.retried = retried
        if slots is not None:
            self.slots = slots
        if state is not None:
            self.state = state
        if step is not None:
            self.step = step
        if uploading_bytes_per_second is not None:
            self.uploading_bytes_per_second = uploading_bytes_per_second

    @property
    def bytes_failed(self):
        """Gets the bytes_failed of this MigrationStat.  # noqa: E501


        :return: The bytes_failed of this MigrationStat.  # noqa: E501
        :rtype: int
        """
        return self._bytes_failed

    @bytes_failed.setter
    def bytes_failed(self, bytes_failed):
        """Sets the bytes_failed of this MigrationStat.


        :param bytes_failed: The bytes_failed of this MigrationStat.  # noqa: E501
        :type: int
        """

        self._bytes_failed = bytes_failed

    @property
    def bytes_in_source(self):
        """Gets the bytes_in_source of this MigrationStat.  # noqa: E501


        :return: The bytes_in_source of this MigrationStat.  # noqa: E501
        :rtype: int
        """
        return self._bytes_in_source

    @bytes_in_source.setter
    def bytes_in_source(self, bytes_in_source):
        """Sets the bytes_in_source of this MigrationStat.


        :param bytes_in_source: The bytes_in_source of this MigrationStat.  # noqa: E501
        :type: int
        """

        self._bytes_in_source = bytes_in_source

    @property
    def bytes_processed(self):
        """Gets the bytes_processed of this MigrationStat.  # noqa: E501


        :return: The bytes_processed of this MigrationStat.  # noqa: E501
        :rtype: int
        """
        return self._bytes_processed

    @bytes_processed.setter
    def bytes_processed(self, bytes_processed):
        """Sets the bytes_processed of this MigrationStat.


        :param bytes_processed: The bytes_processed of this MigrationStat.  # noqa: E501
        :type: int
        """

        self._bytes_processed = bytes_processed

    @property
    def bytes_removed_from_destination(self):
        """Gets the bytes_removed_from_destination of this MigrationStat.  # noqa: E501


        :return: The bytes_removed_from_destination of this MigrationStat.  # noqa: E501
        :rtype: int
        """
        return self._bytes_removed_from_destination

    @bytes_removed_from_destination.setter
    def bytes_removed_from_destination(self, bytes_removed_from_destination):
        """Sets the bytes_removed_from_destination of this MigrationStat.


        :param bytes_removed_from_destination: The bytes_removed_from_destination of this MigrationStat.  # noqa: E501
        :type: int
        """

        self._bytes_removed_from_destination = bytes_removed_from_destination

    @property
    def bytes_skipped(self):
        """Gets the bytes_skipped of this MigrationStat.  # noqa: E501


        :return: The bytes_skipped of this MigrationStat.  # noqa: E501
        :rtype: int
        """
        return self._bytes_skipped

    @bytes_skipped.setter
    def bytes_skipped(self, bytes_skipped):
        """Sets the bytes_skipped of this MigrationStat.


        :param bytes_skipped: The bytes_skipped of this MigrationStat.  # noqa: E501
        :type: int
        """

        self._bytes_skipped = bytes_skipped

    @property
    def bytes_uploaded(self):
        """Gets the bytes_uploaded of this MigrationStat.  # noqa: E501


        :return: The bytes_uploaded of this MigrationStat.  # noqa: E501
        :rtype: int
        """
        return self._bytes_uploaded

    @bytes_uploaded.setter
    def bytes_uploaded(self, bytes_uploaded):
        """Sets the bytes_uploaded of this MigrationStat.


        :param bytes_uploaded: The bytes_uploaded of this MigrationStat.  # noqa: E501
        :type: int
        """

        self._bytes_uploaded = bytes_uploaded

    @property
    def created(self):
        """Gets the created of this MigrationStat.  # noqa: E501

        Creation time  # noqa: E501

        :return: The created of this MigrationStat.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MigrationStat.

        Creation time  # noqa: E501

        :param created: The created of this MigrationStat.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def engines(self):
        """Gets the engines of this MigrationStat.  # noqa: E501

        Number of active engines  # noqa: E501

        :return: The engines of this MigrationStat.  # noqa: E501
        :rtype: int
        """
        return self._engines

    @engines.setter
    def engines(self, engines):
        """Sets the engines of this MigrationStat.

        Number of active engines  # noqa: E501

        :param engines: The engines of this MigrationStat.  # noqa: E501
        :type: int
        """

        self._engines = engines

    @property
    def estimated(self):
        """Gets the estimated of this MigrationStat.  # noqa: E501

        Estimated time  # noqa: E501

        :return: The estimated of this MigrationStat.  # noqa: E501
        :rtype: datetime
        """
        return self._estimated

    @estimated.setter
    def estimated(self, estimated):
        """Sets the estimated of this MigrationStat.

        Estimated time  # noqa: E501

        :param estimated: The estimated of this MigrationStat.  # noqa: E501
        :type: datetime
        """

        self._estimated = estimated

    @property
    def finished(self):
        """Gets the finished of this MigrationStat.  # noqa: E501

        Finished time  # noqa: E501

        :return: The finished of this MigrationStat.  # noqa: E501
        :rtype: datetime
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this MigrationStat.

        Finished time  # noqa: E501

        :param finished: The finished of this MigrationStat.  # noqa: E501
        :type: datetime
        """

        self._finished = finished

    @property
    def objects_failed(self):
        """Gets the objects_failed of this MigrationStat.  # noqa: E501


        :return: The objects_failed of this MigrationStat.  # noqa: E501
        :rtype: int
        """
        return self._objects_failed

    @objects_failed.setter
    def objects_failed(self, objects_failed):
        """Sets the objects_failed of this MigrationStat.


        :param objects_failed: The objects_failed of this MigrationStat.  # noqa: E501
        :type: int
        """

        self._objects_failed = objects_failed

    @property
    def objects_in_source(self):
        """Gets the objects_in_source of this MigrationStat.  # noqa: E501


        :return: The objects_in_source of this MigrationStat.  # noqa: E501
        :rtype: int
        """
        return self._objects_in_source

    @objects_in_source.setter
    def objects_in_source(self, objects_in_source):
        """Sets the objects_in_source of this MigrationStat.


        :param objects_in_source: The objects_in_source of this MigrationStat.  # noqa: E501
        :type: int
        """

        self._objects_in_source = objects_in_source

    @property
    def objects_processed(self):
        """Gets the objects_processed of this MigrationStat.  # noqa: E501


        :return: The objects_processed of this MigrationStat.  # noqa: E501
        :rtype: int
        """
        return self._objects_processed

    @objects_processed.setter
    def objects_processed(self, objects_processed):
        """Sets the objects_processed of this MigrationStat.


        :param objects_processed: The objects_processed of this MigrationStat.  # noqa: E501
        :type: int
        """

        self._objects_processed = objects_processed

    @property
    def objects_removed_from_destination(self):
        """Gets the objects_removed_from_destination of this MigrationStat.  # noqa: E501


        :return: The objects_removed_from_destination of this MigrationStat.  # noqa: E501
        :rtype: int
        """
        return self._objects_removed_from_destination

    @objects_removed_from_destination.setter
    def objects_removed_from_destination(self, objects_removed_from_destination):
        """Sets the objects_removed_from_destination of this MigrationStat.


        :param objects_removed_from_destination: The objects_removed_from_destination of this MigrationStat.  # noqa: E501
        :type: int
        """

        self._objects_removed_from_destination = objects_removed_from_destination

    @property
    def objects_skipped(self):
        """Gets the objects_skipped of this MigrationStat.  # noqa: E501


        :return: The objects_skipped of this MigrationStat.  # noqa: E501
        :rtype: int
        """
        return self._objects_skipped

    @objects_skipped.setter
    def objects_skipped(self, objects_skipped):
        """Sets the objects_skipped of this MigrationStat.


        :param objects_skipped: The objects_skipped of this MigrationStat.  # noqa: E501
        :type: int
        """

        self._objects_skipped = objects_skipped

    @property
    def objects_uploaded(self):
        """Gets the objects_uploaded of this MigrationStat.  # noqa: E501


        :return: The objects_uploaded of this MigrationStat.  # noqa: E501
        :rtype: int
        """
        return self._objects_uploaded

    @objects_uploaded.setter
    def objects_uploaded(self, objects_uploaded):
        """Sets the objects_uploaded of this MigrationStat.


        :param objects_uploaded: The objects_uploaded of this MigrationStat.  # noqa: E501
        :type: int
        """

        self._objects_uploaded = objects_uploaded

    @property
    def processing_objects_per_second(self):
        """Gets the processing_objects_per_second of this MigrationStat.  # noqa: E501


        :return: The processing_objects_per_second of this MigrationStat.  # noqa: E501
        :rtype: float
        """
        return self._processing_objects_per_second

    @processing_objects_per_second.setter
    def processing_objects_per_second(self, processing_objects_per_second):
        """Sets the processing_objects_per_second of this MigrationStat.


        :param processing_objects_per_second: The processing_objects_per_second of this MigrationStat.  # noqa: E501
        :type: float
        """

        self._processing_objects_per_second = processing_objects_per_second

    @property
    def progress(self):
        """Gets the progress of this MigrationStat.  # noqa: E501

        Progress in percents  # noqa: E501

        :return: The progress of this MigrationStat.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this MigrationStat.

        Progress in percents  # noqa: E501

        :param progress: The progress of this MigrationStat.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def retried(self):
        """Gets the retried of this MigrationStat.  # noqa: E501


        :return: The retried of this MigrationStat.  # noqa: E501
        :rtype: int
        """
        return self._retried

    @retried.setter
    def retried(self, retried):
        """Sets the retried of this MigrationStat.


        :param retried: The retried of this MigrationStat.  # noqa: E501
        :type: int
        """

        self._retried = retried

    @property
    def slots(self):
        """Gets the slots of this MigrationStat.  # noqa: E501

        Migration's slots statistics  # noqa: E501

        :return: The slots of this MigrationStat.  # noqa: E501
        :rtype: list[MigrationSlotStat]
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this MigrationStat.

        Migration's slots statistics  # noqa: E501

        :param slots: The slots of this MigrationStat.  # noqa: E501
        :type: list[MigrationSlotStat]
        """

        self._slots = slots

    @property
    def state(self):
        """Gets the state of this MigrationStat.  # noqa: E501

        Migration state  # noqa: E501

        :return: The state of this MigrationStat.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MigrationStat.

        Migration state  # noqa: E501

        :param state: The state of this MigrationStat.  # noqa: E501
        :type: str
        """
        allowed_values = ["NOT_ASSIGNED", "IN_PROGRESS", "IN_PROGRESS_CANCELING", "CANCELED", "SUCCEEDED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def step(self):
        """Gets the step of this MigrationStat.  # noqa: E501

        Migration step  # noqa: E501

        :return: The step of this MigrationStat.  # noqa: E501
        :rtype: str
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this MigrationStat.

        Migration step  # noqa: E501

        :param step: The step of this MigrationStat.  # noqa: E501
        :type: str
        """
        allowed_values = ["COUNT", "CLEAN", "MIGRATE"]  # noqa: E501
        if step not in allowed_values:
            raise ValueError(
                "Invalid value for `step` ({0}), must be one of {1}"  # noqa: E501
                .format(step, allowed_values)
            )

        self._step = step

    @property
    def uploading_bytes_per_second(self):
        """Gets the uploading_bytes_per_second of this MigrationStat.  # noqa: E501


        :return: The uploading_bytes_per_second of this MigrationStat.  # noqa: E501
        :rtype: float
        """
        return self._uploading_bytes_per_second

    @uploading_bytes_per_second.setter
    def uploading_bytes_per_second(self, uploading_bytes_per_second):
        """Sets the uploading_bytes_per_second of this MigrationStat.


        :param uploading_bytes_per_second: The uploading_bytes_per_second of this MigrationStat.  # noqa: E501
        :type: float
        """

        self._uploading_bytes_per_second = uploading_bytes_per_second

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
