# coding: utf-8

"""
    Flexify.IO User REST API

    + Generate access token via `/rest/auth` + Authorize in Swagger UI using `Bearer TOKEN` + Enjoy Flexify.IO REST API  # noqa: E501

    OpenAPI spec version: 2.4.2
    Contact: info@flexify.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MigrationSlotStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_streams': 'int',
        'slot': 'int',
        'state': 'str',
        'step': 'str'
    }

    attribute_map = {
        'active_streams': 'activeStreams',
        'slot': 'slot',
        'state': 'state',
        'step': 'step'
    }

    def __init__(self, active_streams=None, slot=None, state=None, step=None):  # noqa: E501
        """MigrationSlotStat - a model defined in Swagger"""  # noqa: E501

        self._active_streams = None
        self._slot = None
        self._state = None
        self._step = None
        self.discriminator = None

        if active_streams is not None:
            self.active_streams = active_streams
        if slot is not None:
            self.slot = slot
        if state is not None:
            self.state = state
        if step is not None:
            self.step = step

    @property
    def active_streams(self):
        """Gets the active_streams of this MigrationSlotStat.  # noqa: E501


        :return: The active_streams of this MigrationSlotStat.  # noqa: E501
        :rtype: int
        """
        return self._active_streams

    @active_streams.setter
    def active_streams(self, active_streams):
        """Sets the active_streams of this MigrationSlotStat.


        :param active_streams: The active_streams of this MigrationSlotStat.  # noqa: E501
        :type: int
        """

        self._active_streams = active_streams

    @property
    def slot(self):
        """Gets the slot of this MigrationSlotStat.  # noqa: E501


        :return: The slot of this MigrationSlotStat.  # noqa: E501
        :rtype: int
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """Sets the slot of this MigrationSlotStat.


        :param slot: The slot of this MigrationSlotStat.  # noqa: E501
        :type: int
        """

        self._slot = slot

    @property
    def state(self):
        """Gets the state of this MigrationSlotStat.  # noqa: E501


        :return: The state of this MigrationSlotStat.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MigrationSlotStat.


        :param state: The state of this MigrationSlotStat.  # noqa: E501
        :type: str
        """
        allowed_values = ["WAITING", "STARTING", "IN_PROGRESS", "STOPPING", "SUCCEEDED", "FAILED", "CANCELED", "NO_CONNECTION_TO_ENGINE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def step(self):
        """Gets the step of this MigrationSlotStat.  # noqa: E501


        :return: The step of this MigrationSlotStat.  # noqa: E501
        :rtype: str
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this MigrationSlotStat.


        :param step: The step of this MigrationSlotStat.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "COUNT", "CLEAN", "MIGRATE"]  # noqa: E501
        if step not in allowed_values:
            raise ValueError(
                "Invalid value for `step` ({0}), must be one of {1}"  # noqa: E501
                .format(step, allowed_values)
            )

        self._step = step

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationSlotStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
