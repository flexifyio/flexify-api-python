# coding: utf-8

"""
    Flexify.IO User REST API

    + Generate access token via `/rest/auth` + Authorize in Swagger UI using `Bearer TOKEN` + Enjoy Flexify.IO REST API  # noqa: E501

    OpenAPI spec version: 2.4.2
    Contact: info@flexify.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.io.flexify.apiclient.model.billing_account import BillingAccount  # noqa: F401,E501
from swagger_client.io.flexify.apiclient.model.describe_organization import DescribeOrganization  # noqa: F401,E501
from swagger_client.io.flexify.apiclient.model.user_profile import UserProfile  # noqa: F401,E501


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'BillingAccount',
        'id': 'int',
        'org': 'DescribeOrganization',
        'profile': 'UserProfile',
        'registered': 'datetime',
        'resource_last_modified': 'int',
        'roles': 'list[str]',
        'state': 'str',
        'username': 'str'
    }

    attribute_map = {
        'account': 'account',
        'id': 'id',
        'org': 'org',
        'profile': 'profile',
        'registered': 'registered',
        'resource_last_modified': 'resourceLastModified',
        'roles': 'roles',
        'state': 'state',
        'username': 'username'
    }

    def __init__(self, account=None, id=None, org=None, profile=None, registered=None, resource_last_modified=None, roles=None, state=None, username=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501

        self._account = None
        self._id = None
        self._org = None
        self._profile = None
        self._registered = None
        self._resource_last_modified = None
        self._roles = None
        self._state = None
        self._username = None
        self.discriminator = None

        if account is not None:
            self.account = account
        if id is not None:
            self.id = id
        if org is not None:
            self.org = org
        if profile is not None:
            self.profile = profile
        if registered is not None:
            self.registered = registered
        if resource_last_modified is not None:
            self.resource_last_modified = resource_last_modified
        if roles is not None:
            self.roles = roles
        if state is not None:
            self.state = state
        if username is not None:
            self.username = username

    @property
    def account(self):
        """Gets the account of this User.  # noqa: E501

        Billing Account  # noqa: E501

        :return: The account of this User.  # noqa: E501
        :rtype: BillingAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this User.

        Billing Account  # noqa: E501

        :param account: The account of this User.  # noqa: E501
        :type: BillingAccount
        """

        self._account = account

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501

        User ID in the system  # noqa: E501

        :return: The id of this User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        User ID in the system  # noqa: E501

        :param id: The id of this User.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def org(self):
        """Gets the org of this User.  # noqa: E501

        Owning Organization  # noqa: E501

        :return: The org of this User.  # noqa: E501
        :rtype: DescribeOrganization
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this User.

        Owning Organization  # noqa: E501

        :param org: The org of this User.  # noqa: E501
        :type: DescribeOrganization
        """

        self._org = org

    @property
    def profile(self):
        """Gets the profile of this User.  # noqa: E501

        User Profile  # noqa: E501

        :return: The profile of this User.  # noqa: E501
        :rtype: UserProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this User.

        User Profile  # noqa: E501

        :param profile: The profile of this User.  # noqa: E501
        :type: UserProfile
        """

        self._profile = profile

    @property
    def registered(self):
        """Gets the registered of this User.  # noqa: E501

        Registration time  # noqa: E501

        :return: The registered of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this User.

        Registration time  # noqa: E501

        :param registered: The registered of this User.  # noqa: E501
        :type: datetime
        """

        self._registered = registered

    @property
    def resource_last_modified(self):
        """Gets the resource_last_modified of this User.  # noqa: E501

        Timestamp of the last update of the user, organization or billing account  # noqa: E501

        :return: The resource_last_modified of this User.  # noqa: E501
        :rtype: int
        """
        return self._resource_last_modified

    @resource_last_modified.setter
    def resource_last_modified(self, resource_last_modified):
        """Sets the resource_last_modified of this User.

        Timestamp of the last update of the user, organization or billing account  # noqa: E501

        :param resource_last_modified: The resource_last_modified of this User.  # noqa: E501
        :type: int
        """

        self._resource_last_modified = resource_last_modified

    @property
    def roles(self):
        """Gets the roles of this User.  # noqa: E501

        User Roles  # noqa: E501

        :return: The roles of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this User.

        User Roles  # noqa: E501

        :param roles: The roles of this User.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ROLE_USER", "ROLE_ADMIN", "ROLE_ACTUATOR"]  # noqa: E501
        if not set(roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(roles) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._roles = roles

    @property
    def state(self):
        """Gets the state of this User.  # noqa: E501

        User State  # noqa: E501

        :return: The state of this User.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this User.

        User State  # noqa: E501

        :param state: The state of this User.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "DISABLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501

        Username  # noqa: E501

        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

        Username  # noqa: E501

        :param username: The username of this User.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
