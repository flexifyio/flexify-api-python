# coding: utf-8

"""
    Flexify.IO User REST API

    + Generate access token via `/rest/auth` + Authorize in Swagger UI using `Bearer TOKEN` + Enjoy Flexify.IO REST API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: info@flexify.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flexify_api.models.cloud_location import CloudLocation  # noqa: F401,E501


class MigrationSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conflict_resolution': 'str',
        'engines_location': 'CloudLocation',
        'existing_data_in_destination': 'str',
        'max_engines': 'int',
        'max_retries': 'int',
        'max_retries_for_copy': 'int',
        'max_retry_timeout': 'int',
        'max_streams': 'int',
        'migration_mode': 'str',
        'name': 'str',
        'object_key_filter': 'str',
        'retry_timeout': 'int',
        'skip_if_hash_matches': 'bool',
        'slots_per_mapping': 'int'
    }

    attribute_map = {
        'conflict_resolution': 'conflictResolution',
        'engines_location': 'enginesLocation',
        'existing_data_in_destination': 'existingDataInDestination',
        'max_engines': 'maxEngines',
        'max_retries': 'maxRetries',
        'max_retries_for_copy': 'maxRetriesForCopy',
        'max_retry_timeout': 'maxRetryTimeout',
        'max_streams': 'maxStreams',
        'migration_mode': 'migrationMode',
        'name': 'name',
        'object_key_filter': 'objectKeyFilter',
        'retry_timeout': 'retryTimeout',
        'skip_if_hash_matches': 'skipIfHashMatches',
        'slots_per_mapping': 'slotsPerMapping'
    }

    def __init__(self, conflict_resolution=None, engines_location=None, existing_data_in_destination=None, max_engines=None, max_retries=None, max_retries_for_copy=None, max_retry_timeout=None, max_streams=None, migration_mode=None, name=None, object_key_filter=None, retry_timeout=None, skip_if_hash_matches=None, slots_per_mapping=None):  # noqa: E501
        """MigrationSettings - a model defined in Swagger"""  # noqa: E501

        self._conflict_resolution = None
        self._engines_location = None
        self._existing_data_in_destination = None
        self._max_engines = None
        self._max_retries = None
        self._max_retries_for_copy = None
        self._max_retry_timeout = None
        self._max_streams = None
        self._migration_mode = None
        self._name = None
        self._object_key_filter = None
        self._retry_timeout = None
        self._skip_if_hash_matches = None
        self._slots_per_mapping = None
        self.discriminator = None

        if conflict_resolution is not None:
            self.conflict_resolution = conflict_resolution
        if engines_location is not None:
            self.engines_location = engines_location
        if existing_data_in_destination is not None:
            self.existing_data_in_destination = existing_data_in_destination
        if max_engines is not None:
            self.max_engines = max_engines
        if max_retries is not None:
            self.max_retries = max_retries
        if max_retries_for_copy is not None:
            self.max_retries_for_copy = max_retries_for_copy
        if max_retry_timeout is not None:
            self.max_retry_timeout = max_retry_timeout
        if max_streams is not None:
            self.max_streams = max_streams
        if migration_mode is not None:
            self.migration_mode = migration_mode
        if name is not None:
            self.name = name
        if object_key_filter is not None:
            self.object_key_filter = object_key_filter
        if retry_timeout is not None:
            self.retry_timeout = retry_timeout
        if skip_if_hash_matches is not None:
            self.skip_if_hash_matches = skip_if_hash_matches
        if slots_per_mapping is not None:
            self.slots_per_mapping = slots_per_mapping

    @property
    def conflict_resolution(self):
        """Gets the conflict_resolution of this MigrationSettings.  # noqa: E501

        Conflict resolution  # noqa: E501

        :return: The conflict_resolution of this MigrationSettings.  # noqa: E501
        :rtype: str
        """
        return self._conflict_resolution

    @conflict_resolution.setter
    def conflict_resolution(self, conflict_resolution):
        """Sets the conflict_resolution of this MigrationSettings.

        Conflict resolution  # noqa: E501

        :param conflict_resolution: The conflict_resolution of this MigrationSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["SOURCE", "DESTINATION", "BOTH", "NEWER"]  # noqa: E501
        if conflict_resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `conflict_resolution` ({0}), must be one of {1}"  # noqa: E501
                .format(conflict_resolution, allowed_values)
            )

        self._conflict_resolution = conflict_resolution

    @property
    def engines_location(self):
        """Gets the engines_location of this MigrationSettings.  # noqa: E501

        Location of the engines to migrate  # noqa: E501

        :return: The engines_location of this MigrationSettings.  # noqa: E501
        :rtype: CloudLocation
        """
        return self._engines_location

    @engines_location.setter
    def engines_location(self, engines_location):
        """Sets the engines_location of this MigrationSettings.

        Location of the engines to migrate  # noqa: E501

        :param engines_location: The engines_location of this MigrationSettings.  # noqa: E501
        :type: CloudLocation
        """

        self._engines_location = engines_location

    @property
    def existing_data_in_destination(self):
        """Gets the existing_data_in_destination of this MigrationSettings.  # noqa: E501

        Keep or clean data in destination before migration (identical with source objects keep in any cases)  # noqa: E501

        :return: The existing_data_in_destination of this MigrationSettings.  # noqa: E501
        :rtype: str
        """
        return self._existing_data_in_destination

    @existing_data_in_destination.setter
    def existing_data_in_destination(self, existing_data_in_destination):
        """Sets the existing_data_in_destination of this MigrationSettings.

        Keep or clean data in destination before migration (identical with source objects keep in any cases)  # noqa: E501

        :param existing_data_in_destination: The existing_data_in_destination of this MigrationSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["KEEP", "CLEAN"]  # noqa: E501
        if existing_data_in_destination not in allowed_values:
            raise ValueError(
                "Invalid value for `existing_data_in_destination` ({0}), must be one of {1}"  # noqa: E501
                .format(existing_data_in_destination, allowed_values)
            )

        self._existing_data_in_destination = existing_data_in_destination

    @property
    def max_engines(self):
        """Gets the max_engines of this MigrationSettings.  # noqa: E501

        Maximum number of engines this migration uses (experimental)  # noqa: E501

        :return: The max_engines of this MigrationSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_engines

    @max_engines.setter
    def max_engines(self, max_engines):
        """Sets the max_engines of this MigrationSettings.

        Maximum number of engines this migration uses (experimental)  # noqa: E501

        :param max_engines: The max_engines of this MigrationSettings.  # noqa: E501
        :type: int
        """

        self._max_engines = max_engines

    @property
    def max_retries(self):
        """Gets the max_retries of this MigrationSettings.  # noqa: E501

        Maximum number of retries  # noqa: E501

        :return: The max_retries of this MigrationSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_retries

    @max_retries.setter
    def max_retries(self, max_retries):
        """Sets the max_retries of this MigrationSettings.

        Maximum number of retries  # noqa: E501

        :param max_retries: The max_retries of this MigrationSettings.  # noqa: E501
        :type: int
        """

        self._max_retries = max_retries

    @property
    def max_retries_for_copy(self):
        """Gets the max_retries_for_copy of this MigrationSettings.  # noqa: E501

        Maximum number of retries after copy started  # noqa: E501

        :return: The max_retries_for_copy of this MigrationSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_retries_for_copy

    @max_retries_for_copy.setter
    def max_retries_for_copy(self, max_retries_for_copy):
        """Sets the max_retries_for_copy of this MigrationSettings.

        Maximum number of retries after copy started  # noqa: E501

        :param max_retries_for_copy: The max_retries_for_copy of this MigrationSettings.  # noqa: E501
        :type: int
        """

        self._max_retries_for_copy = max_retries_for_copy

    @property
    def max_retry_timeout(self):
        """Gets the max_retry_timeout of this MigrationSettings.  # noqa: E501

        Maximum timeout between retries in seconds  # noqa: E501

        :return: The max_retry_timeout of this MigrationSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_retry_timeout

    @max_retry_timeout.setter
    def max_retry_timeout(self, max_retry_timeout):
        """Sets the max_retry_timeout of this MigrationSettings.

        Maximum timeout between retries in seconds  # noqa: E501

        :param max_retry_timeout: The max_retry_timeout of this MigrationSettings.  # noqa: E501
        :type: int
        """

        self._max_retry_timeout = max_retry_timeout

    @property
    def max_streams(self):
        """Gets the max_streams of this MigrationSettings.  # noqa: E501

        Maximum streams that migration will use across all aengines  # noqa: E501

        :return: The max_streams of this MigrationSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_streams

    @max_streams.setter
    def max_streams(self, max_streams):
        """Sets the max_streams of this MigrationSettings.

        Maximum streams that migration will use across all aengines  # noqa: E501

        :param max_streams: The max_streams of this MigrationSettings.  # noqa: E501
        :type: int
        """

        self._max_streams = max_streams

    @property
    def migration_mode(self):
        """Gets the migration_mode of this MigrationSettings.  # noqa: E501

        Migration mode  # noqa: E501

        :return: The migration_mode of this MigrationSettings.  # noqa: E501
        :rtype: str
        """
        return self._migration_mode

    @migration_mode.setter
    def migration_mode(self, migration_mode):
        """Sets the migration_mode of this MigrationSettings.

        Migration mode  # noqa: E501

        :param migration_mode: The migration_mode of this MigrationSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["COPY", "MOVE"]  # noqa: E501
        if migration_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `migration_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(migration_mode, allowed_values)
            )

        self._migration_mode = migration_mode

    @property
    def name(self):
        """Gets the name of this MigrationSettings.  # noqa: E501

        Name of the migration  # noqa: E501

        :return: The name of this MigrationSettings.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MigrationSettings.

        Name of the migration  # noqa: E501

        :param name: The name of this MigrationSettings.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def object_key_filter(self):
        """Gets the object_key_filter of this MigrationSettings.  # noqa: E501

        Migrate objects matching pattern  # noqa: E501

        :return: The object_key_filter of this MigrationSettings.  # noqa: E501
        :rtype: str
        """
        return self._object_key_filter

    @object_key_filter.setter
    def object_key_filter(self, object_key_filter):
        """Sets the object_key_filter of this MigrationSettings.

        Migrate objects matching pattern  # noqa: E501

        :param object_key_filter: The object_key_filter of this MigrationSettings.  # noqa: E501
        :type: str
        """

        self._object_key_filter = object_key_filter

    @property
    def retry_timeout(self):
        """Gets the retry_timeout of this MigrationSettings.  # noqa: E501

        Initial timeout between retries in seconds  # noqa: E501

        :return: The retry_timeout of this MigrationSettings.  # noqa: E501
        :rtype: int
        """
        return self._retry_timeout

    @retry_timeout.setter
    def retry_timeout(self, retry_timeout):
        """Sets the retry_timeout of this MigrationSettings.

        Initial timeout between retries in seconds  # noqa: E501

        :param retry_timeout: The retry_timeout of this MigrationSettings.  # noqa: E501
        :type: int
        """

        self._retry_timeout = retry_timeout

    @property
    def skip_if_hash_matches(self):
        """Gets the skip_if_hash_matches of this MigrationSettings.  # noqa: E501

        Skip migration if source and destination object hash match  # noqa: E501

        :return: The skip_if_hash_matches of this MigrationSettings.  # noqa: E501
        :rtype: bool
        """
        return self._skip_if_hash_matches

    @skip_if_hash_matches.setter
    def skip_if_hash_matches(self, skip_if_hash_matches):
        """Sets the skip_if_hash_matches of this MigrationSettings.

        Skip migration if source and destination object hash match  # noqa: E501

        :param skip_if_hash_matches: The skip_if_hash_matches of this MigrationSettings.  # noqa: E501
        :type: bool
        """

        self._skip_if_hash_matches = skip_if_hash_matches

    @property
    def slots_per_mapping(self):
        """Gets the slots_per_mapping of this MigrationSettings.  # noqa: E501

        Number of slots of storage mapping (bucket)  # noqa: E501

        :return: The slots_per_mapping of this MigrationSettings.  # noqa: E501
        :rtype: int
        """
        return self._slots_per_mapping

    @slots_per_mapping.setter
    def slots_per_mapping(self, slots_per_mapping):
        """Sets the slots_per_mapping of this MigrationSettings.

        Number of slots of storage mapping (bucket)  # noqa: E501

        :param slots_per_mapping: The slots_per_mapping of this MigrationSettings.  # noqa: E501
        :type: int
        """

        self._slots_per_mapping = slots_per_mapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrationSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
