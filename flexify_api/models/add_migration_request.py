# coding: utf-8

"""
    Flexify.IO User REST API

    + Generate access token via `/rest/auth` + Authorize in Swagger UI using `Bearer TOKEN` + Enjoy Flexify.IO REST API  # noqa: E501

    OpenAPI spec version: 2.4.2
    Contact: info@flexify.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flexify_api.models.cloud_location import CloudLocation  # noqa: F401,E501


class AddMigrationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conflict_resolution': 'str',
        'count_source_objects': 'bool',
        'destination_id': 'int',
        'engines_location': 'CloudLocation',
        'existing_data_in_destination': 'str',
        'max_connections_per_engine': 'int',
        'migration_mode': 'str',
        'object_key_filter': 'str',
        'slots': 'int',
        'source_id': 'int'
    }

    attribute_map = {
        'conflict_resolution': 'conflictResolution',
        'count_source_objects': 'countSourceObjects',
        'destination_id': 'destinationId',
        'engines_location': 'enginesLocation',
        'existing_data_in_destination': 'existingDataInDestination',
        'max_connections_per_engine': 'maxConnectionsPerEngine',
        'migration_mode': 'migrationMode',
        'object_key_filter': 'objectKeyFilter',
        'slots': 'slots',
        'source_id': 'sourceId'
    }

    def __init__(self, conflict_resolution=None, count_source_objects=None, destination_id=None, engines_location=None, existing_data_in_destination=None, max_connections_per_engine=None, migration_mode=None, object_key_filter=None, slots=None, source_id=None):  # noqa: E501
        """AddMigrationRequest - a model defined in Swagger"""  # noqa: E501

        self._conflict_resolution = None
        self._count_source_objects = None
        self._destination_id = None
        self._engines_location = None
        self._existing_data_in_destination = None
        self._max_connections_per_engine = None
        self._migration_mode = None
        self._object_key_filter = None
        self._slots = None
        self._source_id = None
        self.discriminator = None

        self.conflict_resolution = conflict_resolution
        if count_source_objects is not None:
            self.count_source_objects = count_source_objects
        self.destination_id = destination_id
        if engines_location is not None:
            self.engines_location = engines_location
        if existing_data_in_destination is not None:
            self.existing_data_in_destination = existing_data_in_destination
        if max_connections_per_engine is not None:
            self.max_connections_per_engine = max_connections_per_engine
        self.migration_mode = migration_mode
        if object_key_filter is not None:
            self.object_key_filter = object_key_filter
        if slots is not None:
            self.slots = slots
        self.source_id = source_id

    @property
    def conflict_resolution(self):
        """Gets the conflict_resolution of this AddMigrationRequest.  # noqa: E501

        Conflict resolution  # noqa: E501

        :return: The conflict_resolution of this AddMigrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._conflict_resolution

    @conflict_resolution.setter
    def conflict_resolution(self, conflict_resolution):
        """Sets the conflict_resolution of this AddMigrationRequest.

        Conflict resolution  # noqa: E501

        :param conflict_resolution: The conflict_resolution of this AddMigrationRequest.  # noqa: E501
        :type: str
        """
        if conflict_resolution is None:
            raise ValueError("Invalid value for `conflict_resolution`, must not be `None`")  # noqa: E501
        allowed_values = ["SOURCE", "DESTINATION", "BOTH", "NEWER"]  # noqa: E501
        if conflict_resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `conflict_resolution` ({0}), must be one of {1}"  # noqa: E501
                .format(conflict_resolution, allowed_values)
            )

        self._conflict_resolution = conflict_resolution

    @property
    def count_source_objects(self):
        """Gets the count_source_objects of this AddMigrationRequest.  # noqa: E501

        Count objects in source before migration  # noqa: E501

        :return: The count_source_objects of this AddMigrationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._count_source_objects

    @count_source_objects.setter
    def count_source_objects(self, count_source_objects):
        """Sets the count_source_objects of this AddMigrationRequest.

        Count objects in source before migration  # noqa: E501

        :param count_source_objects: The count_source_objects of this AddMigrationRequest.  # noqa: E501
        :type: bool
        """

        self._count_source_objects = count_source_objects

    @property
    def destination_id(self):
        """Gets the destination_id of this AddMigrationRequest.  # noqa: E501

        Link to destination storage  # noqa: E501

        :return: The destination_id of this AddMigrationRequest.  # noqa: E501
        :rtype: int
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this AddMigrationRequest.

        Link to destination storage  # noqa: E501

        :param destination_id: The destination_id of this AddMigrationRequest.  # noqa: E501
        :type: int
        """
        if destination_id is None:
            raise ValueError("Invalid value for `destination_id`, must not be `None`")  # noqa: E501

        self._destination_id = destination_id

    @property
    def engines_location(self):
        """Gets the engines_location of this AddMigrationRequest.  # noqa: E501

        Location of the engines to migrate  # noqa: E501

        :return: The engines_location of this AddMigrationRequest.  # noqa: E501
        :rtype: CloudLocation
        """
        return self._engines_location

    @engines_location.setter
    def engines_location(self, engines_location):
        """Sets the engines_location of this AddMigrationRequest.

        Location of the engines to migrate  # noqa: E501

        :param engines_location: The engines_location of this AddMigrationRequest.  # noqa: E501
        :type: CloudLocation
        """

        self._engines_location = engines_location

    @property
    def existing_data_in_destination(self):
        """Gets the existing_data_in_destination of this AddMigrationRequest.  # noqa: E501

        Keep or clean data in destination before migration (identical with source objects keep in any cases)  # noqa: E501

        :return: The existing_data_in_destination of this AddMigrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._existing_data_in_destination

    @existing_data_in_destination.setter
    def existing_data_in_destination(self, existing_data_in_destination):
        """Sets the existing_data_in_destination of this AddMigrationRequest.

        Keep or clean data in destination before migration (identical with source objects keep in any cases)  # noqa: E501

        :param existing_data_in_destination: The existing_data_in_destination of this AddMigrationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["KEEP", "CLEAN"]  # noqa: E501
        if existing_data_in_destination not in allowed_values:
            raise ValueError(
                "Invalid value for `existing_data_in_destination` ({0}), must be one of {1}"  # noqa: E501
                .format(existing_data_in_destination, allowed_values)
            )

        self._existing_data_in_destination = existing_data_in_destination

    @property
    def max_connections_per_engine(self):
        """Gets the max_connections_per_engine of this AddMigrationRequest.  # noqa: E501

        Maximum Connections per engine  # noqa: E501

        :return: The max_connections_per_engine of this AddMigrationRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_connections_per_engine

    @max_connections_per_engine.setter
    def max_connections_per_engine(self, max_connections_per_engine):
        """Sets the max_connections_per_engine of this AddMigrationRequest.

        Maximum Connections per engine  # noqa: E501

        :param max_connections_per_engine: The max_connections_per_engine of this AddMigrationRequest.  # noqa: E501
        :type: int
        """

        self._max_connections_per_engine = max_connections_per_engine

    @property
    def migration_mode(self):
        """Gets the migration_mode of this AddMigrationRequest.  # noqa: E501

        Migration mode  # noqa: E501

        :return: The migration_mode of this AddMigrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._migration_mode

    @migration_mode.setter
    def migration_mode(self, migration_mode):
        """Sets the migration_mode of this AddMigrationRequest.

        Migration mode  # noqa: E501

        :param migration_mode: The migration_mode of this AddMigrationRequest.  # noqa: E501
        :type: str
        """
        if migration_mode is None:
            raise ValueError("Invalid value for `migration_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["COPY", "MOVE"]  # noqa: E501
        if migration_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `migration_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(migration_mode, allowed_values)
            )

        self._migration_mode = migration_mode

    @property
    def object_key_filter(self):
        """Gets the object_key_filter of this AddMigrationRequest.  # noqa: E501

        Migrate objects matching pattern  # noqa: E501

        :return: The object_key_filter of this AddMigrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._object_key_filter

    @object_key_filter.setter
    def object_key_filter(self, object_key_filter):
        """Sets the object_key_filter of this AddMigrationRequest.

        Migrate objects matching pattern  # noqa: E501

        :param object_key_filter: The object_key_filter of this AddMigrationRequest.  # noqa: E501
        :type: str
        """

        self._object_key_filter = object_key_filter

    @property
    def slots(self):
        """Gets the slots of this AddMigrationRequest.  # noqa: E501

        Number of slots of migration  # noqa: E501

        :return: The slots of this AddMigrationRequest.  # noqa: E501
        :rtype: int
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this AddMigrationRequest.

        Number of slots of migration  # noqa: E501

        :param slots: The slots of this AddMigrationRequest.  # noqa: E501
        :type: int
        """

        self._slots = slots

    @property
    def source_id(self):
        """Gets the source_id of this AddMigrationRequest.  # noqa: E501

        Link to source storage  # noqa: E501

        :return: The source_id of this AddMigrationRequest.  # noqa: E501
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this AddMigrationRequest.

        Link to source storage  # noqa: E501

        :param source_id: The source_id of this AddMigrationRequest.  # noqa: E501
        :type: int
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")  # noqa: E501

        self._source_id = source_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddMigrationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
