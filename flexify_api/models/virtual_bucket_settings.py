# coding: utf-8

"""
    Flexify IO User REST API

    + Get API token + Authorize using `Bearer TOKEN` + Enjoy Flexify IO REST API  # noqa: E501

    OpenAPI spec version: 2.12.18.hf1
    Contact: info@flexify.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flexify_api.configuration import Configuration


class VirtualBucketSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_policy': 'VirtualBucketAccessPolicy',
        'bucket_name': 'str'
    }

    attribute_map = {
        'access_policy': 'accessPolicy',
        'bucket_name': 'bucketName'
    }

    def __init__(self, access_policy=None, bucket_name=None, _configuration=None):  # noqa: E501
        """VirtualBucketSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_policy = None
        self._bucket_name = None
        self.discriminator = None

        if access_policy is not None:
            self.access_policy = access_policy
        self.bucket_name = bucket_name

    @property
    def access_policy(self):
        """Gets the access_policy of this VirtualBucketSettings.  # noqa: E501

        Virtual bucket access policy  # noqa: E501

        :return: The access_policy of this VirtualBucketSettings.  # noqa: E501
        :rtype: VirtualBucketAccessPolicy
        """
        return self._access_policy

    @access_policy.setter
    def access_policy(self, access_policy):
        """Sets the access_policy of this VirtualBucketSettings.

        Virtual bucket access policy  # noqa: E501

        :param access_policy: The access_policy of this VirtualBucketSettings.  # noqa: E501
        :type: VirtualBucketAccessPolicy
        """

        self._access_policy = access_policy

    @property
    def bucket_name(self):
        """Gets the bucket_name of this VirtualBucketSettings.  # noqa: E501

        Virtual bucket name  # noqa: E501

        :return: The bucket_name of this VirtualBucketSettings.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this VirtualBucketSettings.

        Virtual bucket name  # noqa: E501

        :param bucket_name: The bucket_name of this VirtualBucketSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bucket_name is None:
            raise ValueError("Invalid value for `bucket_name`, must not be `None`")  # noqa: E501

        self._bucket_name = bucket_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VirtualBucketSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualBucketSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VirtualBucketSettings):
            return True

        return self.to_dict() != other.to_dict()
