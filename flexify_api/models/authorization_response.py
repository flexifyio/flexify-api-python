# coding: utf-8

"""
    Flexify.IO User REST API

    + Get API token + Authorize using `Bearer TOKEN` + Enjoy Flexify.IO REST API  # noqa: E501

    OpenAPI spec version: 2.12.7
    Contact: info@flexify.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AuthorizationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'account_non_expired': 'bool',
        'account_non_locked': 'bool',
        'authorities': 'list[GrantedAuthority]',
        'credentials_non_expired': 'bool',
        'enabled': 'bool',
        'user_id': 'int',
        'username': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_non_expired': 'accountNonExpired',
        'account_non_locked': 'accountNonLocked',
        'authorities': 'authorities',
        'credentials_non_expired': 'credentialsNonExpired',
        'enabled': 'enabled',
        'user_id': 'userId',
        'username': 'username'
    }

    def __init__(self, account_id=None, account_non_expired=None, account_non_locked=None, authorities=None, credentials_non_expired=None, enabled=None, user_id=None, username=None):  # noqa: E501
        """AuthorizationResponse - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._account_non_expired = None
        self._account_non_locked = None
        self._authorities = None
        self._credentials_non_expired = None
        self._enabled = None
        self._user_id = None
        self._username = None
        self.discriminator = None

        self.account_id = account_id
        if account_non_expired is not None:
            self.account_non_expired = account_non_expired
        if account_non_locked is not None:
            self.account_non_locked = account_non_locked
        if authorities is not None:
            self.authorities = authorities
        if credentials_non_expired is not None:
            self.credentials_non_expired = credentials_non_expired
        if enabled is not None:
            self.enabled = enabled
        self.user_id = user_id
        self.username = username

    @property
    def account_id(self):
        """Gets the account_id of this AuthorizationResponse.  # noqa: E501


        :return: The account_id of this AuthorizationResponse.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AuthorizationResponse.


        :param account_id: The account_id of this AuthorizationResponse.  # noqa: E501
        :type: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def account_non_expired(self):
        """Gets the account_non_expired of this AuthorizationResponse.  # noqa: E501


        :return: The account_non_expired of this AuthorizationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._account_non_expired

    @account_non_expired.setter
    def account_non_expired(self, account_non_expired):
        """Sets the account_non_expired of this AuthorizationResponse.


        :param account_non_expired: The account_non_expired of this AuthorizationResponse.  # noqa: E501
        :type: bool
        """

        self._account_non_expired = account_non_expired

    @property
    def account_non_locked(self):
        """Gets the account_non_locked of this AuthorizationResponse.  # noqa: E501


        :return: The account_non_locked of this AuthorizationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._account_non_locked

    @account_non_locked.setter
    def account_non_locked(self, account_non_locked):
        """Sets the account_non_locked of this AuthorizationResponse.


        :param account_non_locked: The account_non_locked of this AuthorizationResponse.  # noqa: E501
        :type: bool
        """

        self._account_non_locked = account_non_locked

    @property
    def authorities(self):
        """Gets the authorities of this AuthorizationResponse.  # noqa: E501


        :return: The authorities of this AuthorizationResponse.  # noqa: E501
        :rtype: list[GrantedAuthority]
        """
        return self._authorities

    @authorities.setter
    def authorities(self, authorities):
        """Sets the authorities of this AuthorizationResponse.


        :param authorities: The authorities of this AuthorizationResponse.  # noqa: E501
        :type: list[GrantedAuthority]
        """

        self._authorities = authorities

    @property
    def credentials_non_expired(self):
        """Gets the credentials_non_expired of this AuthorizationResponse.  # noqa: E501


        :return: The credentials_non_expired of this AuthorizationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._credentials_non_expired

    @credentials_non_expired.setter
    def credentials_non_expired(self, credentials_non_expired):
        """Sets the credentials_non_expired of this AuthorizationResponse.


        :param credentials_non_expired: The credentials_non_expired of this AuthorizationResponse.  # noqa: E501
        :type: bool
        """

        self._credentials_non_expired = credentials_non_expired

    @property
    def enabled(self):
        """Gets the enabled of this AuthorizationResponse.  # noqa: E501


        :return: The enabled of this AuthorizationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AuthorizationResponse.


        :param enabled: The enabled of this AuthorizationResponse.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def user_id(self):
        """Gets the user_id of this AuthorizationResponse.  # noqa: E501


        :return: The user_id of this AuthorizationResponse.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuthorizationResponse.


        :param user_id: The user_id of this AuthorizationResponse.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this AuthorizationResponse.  # noqa: E501


        :return: The username of this AuthorizationResponse.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AuthorizationResponse.


        :param username: The username of this AuthorizationResponse.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthorizationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthorizationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
