# coding: utf-8

"""
    Flexify.IO User REST API

    + Get API token + Authorize using `Bearer TOKEN` + Enjoy Flexify.IO REST API  # noqa: E501

    OpenAPI spec version: 2.12.5-SNAPSHOT
    Contact: info@flexify.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InformationAboutAuthenticationToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comments': 'str',
        'ip': 'str',
        'issued': 'datetime',
        'last_used': 'datetime',
        'token': 'str',
        'token_type': 'str'
    }

    attribute_map = {
        'comments': 'comments',
        'ip': 'ip',
        'issued': 'issued',
        'last_used': 'lastUsed',
        'token': 'token',
        'token_type': 'tokenType'
    }

    def __init__(self, comments=None, ip=None, issued=None, last_used=None, token=None, token_type=None):  # noqa: E501
        """InformationAboutAuthenticationToken - a model defined in Swagger"""  # noqa: E501

        self._comments = None
        self._ip = None
        self._issued = None
        self._last_used = None
        self._token = None
        self._token_type = None
        self.discriminator = None

        if comments is not None:
            self.comments = comments
        if ip is not None:
            self.ip = ip
        if issued is not None:
            self.issued = issued
        if last_used is not None:
            self.last_used = last_used
        if token is not None:
            self.token = token
        if token_type is not None:
            self.token_type = token_type

    @property
    def comments(self):
        """Gets the comments of this InformationAboutAuthenticationToken.  # noqa: E501

        Comments  # noqa: E501

        :return: The comments of this InformationAboutAuthenticationToken.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this InformationAboutAuthenticationToken.

        Comments  # noqa: E501

        :param comments: The comments of this InformationAboutAuthenticationToken.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def ip(self):
        """Gets the ip of this InformationAboutAuthenticationToken.  # noqa: E501

        IP address from which token was requested  # noqa: E501

        :return: The ip of this InformationAboutAuthenticationToken.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this InformationAboutAuthenticationToken.

        IP address from which token was requested  # noqa: E501

        :param ip: The ip of this InformationAboutAuthenticationToken.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def issued(self):
        """Gets the issued of this InformationAboutAuthenticationToken.  # noqa: E501

        When the token was issued  # noqa: E501

        :return: The issued of this InformationAboutAuthenticationToken.  # noqa: E501
        :rtype: datetime
        """
        return self._issued

    @issued.setter
    def issued(self, issued):
        """Sets the issued of this InformationAboutAuthenticationToken.

        When the token was issued  # noqa: E501

        :param issued: The issued of this InformationAboutAuthenticationToken.  # noqa: E501
        :type: datetime
        """

        self._issued = issued

    @property
    def last_used(self):
        """Gets the last_used of this InformationAboutAuthenticationToken.  # noqa: E501

        When the token was last used  # noqa: E501

        :return: The last_used of this InformationAboutAuthenticationToken.  # noqa: E501
        :rtype: datetime
        """
        return self._last_used

    @last_used.setter
    def last_used(self, last_used):
        """Sets the last_used of this InformationAboutAuthenticationToken.

        When the token was last used  # noqa: E501

        :param last_used: The last_used of this InformationAboutAuthenticationToken.  # noqa: E501
        :type: datetime
        """

        self._last_used = last_used

    @property
    def token(self):
        """Gets the token of this InformationAboutAuthenticationToken.  # noqa: E501

        Token string used for Bearer auth  # noqa: E501

        :return: The token of this InformationAboutAuthenticationToken.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this InformationAboutAuthenticationToken.

        Token string used for Bearer auth  # noqa: E501

        :param token: The token of this InformationAboutAuthenticationToken.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def token_type(self):
        """Gets the token_type of this InformationAboutAuthenticationToken.  # noqa: E501

        Type of this token  # noqa: E501

        :return: The token_type of this InformationAboutAuthenticationToken.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this InformationAboutAuthenticationToken.

        Type of this token  # noqa: E501

        :param token_type: The token_type of this InformationAboutAuthenticationToken.  # noqa: E501
        :type: str
        """
        allowed_values = ["API", "IMPERSONATION", "INTEGRATION", "LOGIN"]  # noqa: E501
        if token_type not in allowed_values:
            raise ValueError(
                "Invalid value for `token_type` ({0}), must be one of {1}"  # noqa: E501
                .format(token_type, allowed_values)
            )

        self._token_type = token_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InformationAboutAuthenticationToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InformationAboutAuthenticationToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
