# coding: utf-8

"""
    Flexify.IO User REST API

    + Generate access token via `/rest/auth` + Authorize in Swagger UI using `Bearer TOKEN` + Enjoy Flexify.IO REST API  # noqa: E501

    OpenAPI spec version: 2.4.2
    Contact: info@flexify.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flexify_api.models.cloud_location import CloudLocation  # noqa: F401,E501
from flexify_api.models.migration_stat import MigrationStat  # noqa: F401,E501
from flexify_api.models.storage import Storage  # noqa: F401,E501
from flexify_api.models.storage_account import StorageAccount  # noqa: F401,E501


class Migration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conflict_resolution': 'str',
        'count_source_objects': 'bool',
        'destination_storage': 'Storage',
        'destination_storage_account': 'StorageAccount',
        'engines_location': 'CloudLocation',
        'existing_data_in_destination': 'str',
        'hidden': 'bool',
        'id': 'int',
        'max_connections_per_engine': 'int',
        'migration_mode': 'str',
        'name': 'str',
        'object_key_filter': 'str',
        'slots': 'int',
        'source_storage': 'Storage',
        'source_storage_account': 'StorageAccount',
        'stat': 'MigrationStat'
    }

    attribute_map = {
        'conflict_resolution': 'conflictResolution',
        'count_source_objects': 'countSourceObjects',
        'destination_storage': 'destinationStorage',
        'destination_storage_account': 'destinationStorageAccount',
        'engines_location': 'enginesLocation',
        'existing_data_in_destination': 'existingDataInDestination',
        'hidden': 'hidden',
        'id': 'id',
        'max_connections_per_engine': 'maxConnectionsPerEngine',
        'migration_mode': 'migrationMode',
        'name': 'name',
        'object_key_filter': 'objectKeyFilter',
        'slots': 'slots',
        'source_storage': 'sourceStorage',
        'source_storage_account': 'sourceStorageAccount',
        'stat': 'stat'
    }

    def __init__(self, conflict_resolution=None, count_source_objects=None, destination_storage=None, destination_storage_account=None, engines_location=None, existing_data_in_destination=None, hidden=None, id=None, max_connections_per_engine=None, migration_mode=None, name=None, object_key_filter=None, slots=None, source_storage=None, source_storage_account=None, stat=None):  # noqa: E501
        """Migration - a model defined in Swagger"""  # noqa: E501

        self._conflict_resolution = None
        self._count_source_objects = None
        self._destination_storage = None
        self._destination_storage_account = None
        self._engines_location = None
        self._existing_data_in_destination = None
        self._hidden = None
        self._id = None
        self._max_connections_per_engine = None
        self._migration_mode = None
        self._name = None
        self._object_key_filter = None
        self._slots = None
        self._source_storage = None
        self._source_storage_account = None
        self._stat = None
        self.discriminator = None

        self.conflict_resolution = conflict_resolution
        if count_source_objects is not None:
            self.count_source_objects = count_source_objects
        self.destination_storage = destination_storage
        self.destination_storage_account = destination_storage_account
        if engines_location is not None:
            self.engines_location = engines_location
        if existing_data_in_destination is not None:
            self.existing_data_in_destination = existing_data_in_destination
        if hidden is not None:
            self.hidden = hidden
        if id is not None:
            self.id = id
        if max_connections_per_engine is not None:
            self.max_connections_per_engine = max_connections_per_engine
        self.migration_mode = migration_mode
        self.name = name
        if object_key_filter is not None:
            self.object_key_filter = object_key_filter
        if slots is not None:
            self.slots = slots
        self.source_storage = source_storage
        self.source_storage_account = source_storage_account
        if stat is not None:
            self.stat = stat

    @property
    def conflict_resolution(self):
        """Gets the conflict_resolution of this Migration.  # noqa: E501

        Conflict resolution  # noqa: E501

        :return: The conflict_resolution of this Migration.  # noqa: E501
        :rtype: str
        """
        return self._conflict_resolution

    @conflict_resolution.setter
    def conflict_resolution(self, conflict_resolution):
        """Sets the conflict_resolution of this Migration.

        Conflict resolution  # noqa: E501

        :param conflict_resolution: The conflict_resolution of this Migration.  # noqa: E501
        :type: str
        """
        if conflict_resolution is None:
            raise ValueError("Invalid value for `conflict_resolution`, must not be `None`")  # noqa: E501
        allowed_values = ["SOURCE", "DESTINATION", "BOTH", "NEWER"]  # noqa: E501
        if conflict_resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `conflict_resolution` ({0}), must be one of {1}"  # noqa: E501
                .format(conflict_resolution, allowed_values)
            )

        self._conflict_resolution = conflict_resolution

    @property
    def count_source_objects(self):
        """Gets the count_source_objects of this Migration.  # noqa: E501

        Count objects in source before migration  # noqa: E501

        :return: The count_source_objects of this Migration.  # noqa: E501
        :rtype: bool
        """
        return self._count_source_objects

    @count_source_objects.setter
    def count_source_objects(self, count_source_objects):
        """Sets the count_source_objects of this Migration.

        Count objects in source before migration  # noqa: E501

        :param count_source_objects: The count_source_objects of this Migration.  # noqa: E501
        :type: bool
        """

        self._count_source_objects = count_source_objects

    @property
    def destination_storage(self):
        """Gets the destination_storage of this Migration.  # noqa: E501

        Destination storage  # noqa: E501

        :return: The destination_storage of this Migration.  # noqa: E501
        :rtype: Storage
        """
        return self._destination_storage

    @destination_storage.setter
    def destination_storage(self, destination_storage):
        """Sets the destination_storage of this Migration.

        Destination storage  # noqa: E501

        :param destination_storage: The destination_storage of this Migration.  # noqa: E501
        :type: Storage
        """
        if destination_storage is None:
            raise ValueError("Invalid value for `destination_storage`, must not be `None`")  # noqa: E501

        self._destination_storage = destination_storage

    @property
    def destination_storage_account(self):
        """Gets the destination_storage_account of this Migration.  # noqa: E501

        Destination storage account  # noqa: E501

        :return: The destination_storage_account of this Migration.  # noqa: E501
        :rtype: StorageAccount
        """
        return self._destination_storage_account

    @destination_storage_account.setter
    def destination_storage_account(self, destination_storage_account):
        """Sets the destination_storage_account of this Migration.

        Destination storage account  # noqa: E501

        :param destination_storage_account: The destination_storage_account of this Migration.  # noqa: E501
        :type: StorageAccount
        """
        if destination_storage_account is None:
            raise ValueError("Invalid value for `destination_storage_account`, must not be `None`")  # noqa: E501

        self._destination_storage_account = destination_storage_account

    @property
    def engines_location(self):
        """Gets the engines_location of this Migration.  # noqa: E501

        Location of the engines to migrate  # noqa: E501

        :return: The engines_location of this Migration.  # noqa: E501
        :rtype: CloudLocation
        """
        return self._engines_location

    @engines_location.setter
    def engines_location(self, engines_location):
        """Sets the engines_location of this Migration.

        Location of the engines to migrate  # noqa: E501

        :param engines_location: The engines_location of this Migration.  # noqa: E501
        :type: CloudLocation
        """

        self._engines_location = engines_location

    @property
    def existing_data_in_destination(self):
        """Gets the existing_data_in_destination of this Migration.  # noqa: E501

        Keep or clean data in destination before migration (identical with source objects keep in any cases)  # noqa: E501

        :return: The existing_data_in_destination of this Migration.  # noqa: E501
        :rtype: str
        """
        return self._existing_data_in_destination

    @existing_data_in_destination.setter
    def existing_data_in_destination(self, existing_data_in_destination):
        """Sets the existing_data_in_destination of this Migration.

        Keep or clean data in destination before migration (identical with source objects keep in any cases)  # noqa: E501

        :param existing_data_in_destination: The existing_data_in_destination of this Migration.  # noqa: E501
        :type: str
        """
        allowed_values = ["KEEP", "CLEAN"]  # noqa: E501
        if existing_data_in_destination not in allowed_values:
            raise ValueError(
                "Invalid value for `existing_data_in_destination` ({0}), must be one of {1}"  # noqa: E501
                .format(existing_data_in_destination, allowed_values)
            )

        self._existing_data_in_destination = existing_data_in_destination

    @property
    def hidden(self):
        """Gets the hidden of this Migration.  # noqa: E501

        Hide migration on UI  # noqa: E501

        :return: The hidden of this Migration.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Migration.

        Hide migration on UI  # noqa: E501

        :param hidden: The hidden of this Migration.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this Migration.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The id of this Migration.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Migration.

        Unique identifier  # noqa: E501

        :param id: The id of this Migration.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def max_connections_per_engine(self):
        """Gets the max_connections_per_engine of this Migration.  # noqa: E501

        Maximum Connections per engine  # noqa: E501

        :return: The max_connections_per_engine of this Migration.  # noqa: E501
        :rtype: int
        """
        return self._max_connections_per_engine

    @max_connections_per_engine.setter
    def max_connections_per_engine(self, max_connections_per_engine):
        """Sets the max_connections_per_engine of this Migration.

        Maximum Connections per engine  # noqa: E501

        :param max_connections_per_engine: The max_connections_per_engine of this Migration.  # noqa: E501
        :type: int
        """

        self._max_connections_per_engine = max_connections_per_engine

    @property
    def migration_mode(self):
        """Gets the migration_mode of this Migration.  # noqa: E501

        Migration mode  # noqa: E501

        :return: The migration_mode of this Migration.  # noqa: E501
        :rtype: str
        """
        return self._migration_mode

    @migration_mode.setter
    def migration_mode(self, migration_mode):
        """Sets the migration_mode of this Migration.

        Migration mode  # noqa: E501

        :param migration_mode: The migration_mode of this Migration.  # noqa: E501
        :type: str
        """
        if migration_mode is None:
            raise ValueError("Invalid value for `migration_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["COPY", "MOVE"]  # noqa: E501
        if migration_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `migration_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(migration_mode, allowed_values)
            )

        self._migration_mode = migration_mode

    @property
    def name(self):
        """Gets the name of this Migration.  # noqa: E501

        Name of the migration  # noqa: E501

        :return: The name of this Migration.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Migration.

        Name of the migration  # noqa: E501

        :param name: The name of this Migration.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def object_key_filter(self):
        """Gets the object_key_filter of this Migration.  # noqa: E501

        Migrate objects matching pattern  # noqa: E501

        :return: The object_key_filter of this Migration.  # noqa: E501
        :rtype: str
        """
        return self._object_key_filter

    @object_key_filter.setter
    def object_key_filter(self, object_key_filter):
        """Sets the object_key_filter of this Migration.

        Migrate objects matching pattern  # noqa: E501

        :param object_key_filter: The object_key_filter of this Migration.  # noqa: E501
        :type: str
        """

        self._object_key_filter = object_key_filter

    @property
    def slots(self):
        """Gets the slots of this Migration.  # noqa: E501

        Number of slots of migration  # noqa: E501

        :return: The slots of this Migration.  # noqa: E501
        :rtype: int
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this Migration.

        Number of slots of migration  # noqa: E501

        :param slots: The slots of this Migration.  # noqa: E501
        :type: int
        """

        self._slots = slots

    @property
    def source_storage(self):
        """Gets the source_storage of this Migration.  # noqa: E501

        Source storage  # noqa: E501

        :return: The source_storage of this Migration.  # noqa: E501
        :rtype: Storage
        """
        return self._source_storage

    @source_storage.setter
    def source_storage(self, source_storage):
        """Sets the source_storage of this Migration.

        Source storage  # noqa: E501

        :param source_storage: The source_storage of this Migration.  # noqa: E501
        :type: Storage
        """
        if source_storage is None:
            raise ValueError("Invalid value for `source_storage`, must not be `None`")  # noqa: E501

        self._source_storage = source_storage

    @property
    def source_storage_account(self):
        """Gets the source_storage_account of this Migration.  # noqa: E501

        Source storage account  # noqa: E501

        :return: The source_storage_account of this Migration.  # noqa: E501
        :rtype: StorageAccount
        """
        return self._source_storage_account

    @source_storage_account.setter
    def source_storage_account(self, source_storage_account):
        """Sets the source_storage_account of this Migration.

        Source storage account  # noqa: E501

        :param source_storage_account: The source_storage_account of this Migration.  # noqa: E501
        :type: StorageAccount
        """
        if source_storage_account is None:
            raise ValueError("Invalid value for `source_storage_account`, must not be `None`")  # noqa: E501

        self._source_storage_account = source_storage_account

    @property
    def stat(self):
        """Gets the stat of this Migration.  # noqa: E501

        Migration statistics  # noqa: E501

        :return: The stat of this Migration.  # noqa: E501
        :rtype: MigrationStat
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """Sets the stat of this Migration.

        Migration statistics  # noqa: E501

        :param stat: The stat of this Migration.  # noqa: E501
        :type: MigrationStat
        """

        self._stat = stat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Migration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
