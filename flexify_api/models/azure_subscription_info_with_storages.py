# coding: utf-8

"""
    Flexify IO User REST API

    + Get API token + Authorize using `Bearer TOKEN` + Enjoy Flexify IO REST API  # noqa: E501

    OpenAPI spec version: 2.14.0
    Contact: info@flexify.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flexify_api.configuration import Configuration


class AzureSubscriptionInfoWithStorages(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'error_message': 'str',
        'id': 'str',
        'state': 'str',
        'storage_accounts': 'list[AzureStorageAccountInfo]',
        'subscription_id': 'str',
        'tenant_id': 'str'
    }

    attribute_map = {
        'display_name': 'displayName',
        'error_message': 'errorMessage',
        'id': 'id',
        'state': 'state',
        'storage_accounts': 'storageAccounts',
        'subscription_id': 'subscriptionId',
        'tenant_id': 'tenantId'
    }

    def __init__(self, display_name=None, error_message=None, id=None, state=None, storage_accounts=None, subscription_id=None, tenant_id=None, _configuration=None):  # noqa: E501
        """AzureSubscriptionInfoWithStorages - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._display_name = None
        self._error_message = None
        self._id = None
        self._state = None
        self._storage_accounts = None
        self._subscription_id = None
        self._tenant_id = None
        self.discriminator = None

        if display_name is not None:
            self.display_name = display_name
        if error_message is not None:
            self.error_message = error_message
        if id is not None:
            self.id = id
        if state is not None:
            self.state = state
        if storage_accounts is not None:
            self.storage_accounts = storage_accounts
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if tenant_id is not None:
            self.tenant_id = tenant_id

    @property
    def display_name(self):
        """Gets the display_name of this AzureSubscriptionInfoWithStorages.  # noqa: E501


        :return: The display_name of this AzureSubscriptionInfoWithStorages.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AzureSubscriptionInfoWithStorages.


        :param display_name: The display_name of this AzureSubscriptionInfoWithStorages.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def error_message(self):
        """Gets the error_message of this AzureSubscriptionInfoWithStorages.  # noqa: E501


        :return: The error_message of this AzureSubscriptionInfoWithStorages.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this AzureSubscriptionInfoWithStorages.


        :param error_message: The error_message of this AzureSubscriptionInfoWithStorages.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def id(self):
        """Gets the id of this AzureSubscriptionInfoWithStorages.  # noqa: E501


        :return: The id of this AzureSubscriptionInfoWithStorages.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AzureSubscriptionInfoWithStorages.


        :param id: The id of this AzureSubscriptionInfoWithStorages.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def state(self):
        """Gets the state of this AzureSubscriptionInfoWithStorages.  # noqa: E501


        :return: The state of this AzureSubscriptionInfoWithStorages.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AzureSubscriptionInfoWithStorages.


        :param state: The state of this AzureSubscriptionInfoWithStorages.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def storage_accounts(self):
        """Gets the storage_accounts of this AzureSubscriptionInfoWithStorages.  # noqa: E501


        :return: The storage_accounts of this AzureSubscriptionInfoWithStorages.  # noqa: E501
        :rtype: list[AzureStorageAccountInfo]
        """
        return self._storage_accounts

    @storage_accounts.setter
    def storage_accounts(self, storage_accounts):
        """Sets the storage_accounts of this AzureSubscriptionInfoWithStorages.


        :param storage_accounts: The storage_accounts of this AzureSubscriptionInfoWithStorages.  # noqa: E501
        :type: list[AzureStorageAccountInfo]
        """

        self._storage_accounts = storage_accounts

    @property
    def subscription_id(self):
        """Gets the subscription_id of this AzureSubscriptionInfoWithStorages.  # noqa: E501


        :return: The subscription_id of this AzureSubscriptionInfoWithStorages.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this AzureSubscriptionInfoWithStorages.


        :param subscription_id: The subscription_id of this AzureSubscriptionInfoWithStorages.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this AzureSubscriptionInfoWithStorages.  # noqa: E501


        :return: The tenant_id of this AzureSubscriptionInfoWithStorages.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this AzureSubscriptionInfoWithStorages.


        :param tenant_id: The tenant_id of this AzureSubscriptionInfoWithStorages.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AzureSubscriptionInfoWithStorages, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AzureSubscriptionInfoWithStorages):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AzureSubscriptionInfoWithStorages):
            return True

        return self.to_dict() != other.to_dict()
