# coding: utf-8

"""
    Flexify.IO User REST API

    + Generate access token via `/rest/auth` + Authorize in Swagger UI using `Bearer TOKEN` + Enjoy Flexify.IO REST API  # noqa: E501

    OpenAPI spec version: 2.4.2
    Contact: info@flexify.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from flexify_api.api_client import ApiClient


class StoragesControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_storage_account(self, request, **kwargs):  # noqa: E501
        """Add Storage Account with an optional list of buckets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_storage_account(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddStorageAccountRequest request: request (required)
        :return: IdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_storage_account_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.add_storage_account_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def add_storage_account_with_http_info(self, request, **kwargs):  # noqa: E501
        """Add Storage Account with an optional list of buckets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_storage_account_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddStorageAccountRequest request: request (required)
        :return: IdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_storage_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `add_storage_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/rest/storage-accounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_storages(self, storage_account_id, request, **kwargs):  # noqa: E501
        """Add buckets to the storage account and optionally attach them to endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_storages(storage_account_id, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param int storage_account_id: storage-account-id (required)
        :param AddStoragesRequest request: request (required)
        :return: AddStoragesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_storages_with_http_info(storage_account_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.add_storages_with_http_info(storage_account_id, request, **kwargs)  # noqa: E501
            return data

    def add_storages_with_http_info(self, storage_account_id, request, **kwargs):  # noqa: E501
        """Add buckets to the storage account and optionally attach them to endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_storages_with_http_info(storage_account_id, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param int storage_account_id: storage-account-id (required)
        :param AddStoragesRequest request: request (required)
        :return: AddStoragesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_account_id', 'request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_storages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_account_id' is set
        if ('storage_account_id' not in params or
                params['storage_account_id'] is None):
            raise ValueError("Missing the required parameter `storage_account_id` when calling `add_storages`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `add_storages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_account_id' in params:
            path_params['storage-account-id'] = params['storage_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/rest/storage-accounts/{storage-account-id}/storages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddStoragesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_storage(self, storage_account_id, storage_id, **kwargs):  # noqa: E501
        """Delete Storage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_storage(storage_account_id, storage_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int storage_account_id: storage-account-id (required)
        :param int storage_id: storage-id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_storage_with_http_info(storage_account_id, storage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_storage_with_http_info(storage_account_id, storage_id, **kwargs)  # noqa: E501
            return data

    def delete_storage_with_http_info(self, storage_account_id, storage_id, **kwargs):  # noqa: E501
        """Delete Storage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_storage_with_http_info(storage_account_id, storage_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int storage_account_id: storage-account-id (required)
        :param int storage_id: storage-id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_account_id', 'storage_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_storage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_account_id' is set
        if ('storage_account_id' not in params or
                params['storage_account_id'] is None):
            raise ValueError("Missing the required parameter `storage_account_id` when calling `delete_storage`")  # noqa: E501
        # verify the required parameter 'storage_id' is set
        if ('storage_id' not in params or
                params['storage_id'] is None):
            raise ValueError("Missing the required parameter `storage_id` when calling `delete_storage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_account_id' in params:
            path_params['storage-account-id'] = params['storage_account_id']  # noqa: E501
        if 'storage_id' in params:
            path_params['storage-id'] = params['storage_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/rest/storage-accounts/{storage-account-id}/storages/{storage-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_storages(self, request, **kwargs):  # noqa: E501
        """Deletes storages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_storages(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param IdsList request: request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_storages_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_storages_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def delete_storages_with_http_info(self, request, **kwargs):  # noqa: E501
        """Deletes storages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_storages_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param IdsList request: request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_storages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `delete_storages`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/rest/storage-accounts/actions/delete-storages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_access_keys(self, **kwargs):  # noqa: E501
        """Generate new access keys pair  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.generate_access_keys(async=True)
        >>> result = thread.get()

        :param async bool
        :return: AccessKeysPair
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.generate_access_keys_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.generate_access_keys_with_http_info(**kwargs)  # noqa: E501
            return data

    def generate_access_keys_with_http_info(self, **kwargs):  # noqa: E501
        """Generate new access keys pair  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.generate_access_keys_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: AccessKeysPair
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_access_keys" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/rest/generate-access-keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessKeysPair',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_providers(self, **kwargs):  # noqa: E501
        """Get all storage providers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_providers(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[StorageProvider]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_providers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_providers_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_providers_with_http_info(self, **kwargs):  # noqa: E501
        """Get all storage providers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_providers_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[StorageProvider]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_providers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/rest/providers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StorageProvider]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storage_accounts(self, **kwargs):  # noqa: E501
        """Get all storage accounts for current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storage_accounts(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool include_storages: Include storages of given storage account to the response
        :return: list[StorageAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_storage_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_storage_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_storage_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Get all storage accounts for current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storage_accounts_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool include_storages: Include storages of given storage account to the response
        :return: list[StorageAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include_storages']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storage_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_storages' in params:
            query_params.append(('include-storages', params['include_storages']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/rest/storage-accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StorageAccount]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storages(self, storage_account_id, **kwargs):  # noqa: E501
        """Get storages of the storage account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storages(storage_account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int storage_account_id: storage-account-id (required)
        :return: list[Storage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_storages_with_http_info(storage_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_storages_with_http_info(storage_account_id, **kwargs)  # noqa: E501
            return data

    def get_storages_with_http_info(self, storage_account_id, **kwargs):  # noqa: E501
        """Get storages of the storage account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storages_with_http_info(storage_account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int storage_account_id: storage-account-id (required)
        :return: list[Storage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_account_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_account_id' is set
        if ('storage_account_id' not in params or
                params['storage_account_id'] is None):
            raise ValueError("Missing the required parameter `storage_account_id` when calling `get_storages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_account_id' in params:
            path_params['storage-account-id'] = params['storage_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/rest/storage-accounts/{storage-account-id}/storages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Storage]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def refresh_storage(self, storage_account_id, storage_id, **kwargs):  # noqa: E501
        """Refresh storage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.refresh_storage(storage_account_id, storage_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int storage_account_id: storage-account-id (required)
        :param int storage_id: storage-id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.refresh_storage_with_http_info(storage_account_id, storage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.refresh_storage_with_http_info(storage_account_id, storage_id, **kwargs)  # noqa: E501
            return data

    def refresh_storage_with_http_info(self, storage_account_id, storage_id, **kwargs):  # noqa: E501
        """Refresh storage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.refresh_storage_with_http_info(storage_account_id, storage_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int storage_account_id: storage-account-id (required)
        :param int storage_id: storage-id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_account_id', 'storage_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh_storage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_account_id' is set
        if ('storage_account_id' not in params or
                params['storage_account_id'] is None):
            raise ValueError("Missing the required parameter `storage_account_id` when calling `refresh_storage`")  # noqa: E501
        # verify the required parameter 'storage_id' is set
        if ('storage_id' not in params or
                params['storage_id'] is None):
            raise ValueError("Missing the required parameter `storage_id` when calling `refresh_storage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_account_id' in params:
            path_params['storage-account-id'] = params['storage_account_id']  # noqa: E501
        if 'storage_id' in params:
            path_params['storage-id'] = params['storage_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/rest/storage-accounts/{storage-account-id}/storages/{storage-id}/actions/refresh', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def refresh_storages(self, request, **kwargs):  # noqa: E501
        """Refresh storages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.refresh_storages(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param IdsList request: request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.refresh_storages_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.refresh_storages_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def refresh_storages_with_http_info(self, request, **kwargs):  # noqa: E501
        """Refresh storages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.refresh_storages_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param IdsList request: request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh_storages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `refresh_storages`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/rest/storage-accounts/actions/refresh-storages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_buckets(self, **kwargs):  # noqa: E501
        """Lists buckets of the external storage account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.request_buckets(async=True)
        >>> result = thread.get()

        :param async bool
        :param int provider_id: Provider ID (Amazon S3, Microsoft Azure, etc)
        :param str identity: Account Identity
        :param str credential: Account Credential
        :param str custom_url: Optional endpoint to access the storage
        :param bool use_ssl: Use SSL to connect to the endpoint
        :return: list[Bucket]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.request_buckets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.request_buckets_with_http_info(**kwargs)  # noqa: E501
            return data

    def request_buckets_with_http_info(self, **kwargs):  # noqa: E501
        """Lists buckets of the external storage account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.request_buckets_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int provider_id: Provider ID (Amazon S3, Microsoft Azure, etc)
        :param str identity: Account Identity
        :param str credential: Account Credential
        :param str custom_url: Optional endpoint to access the storage
        :param bool use_ssl: Use SSL to connect to the endpoint
        :return: list[Bucket]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_id', 'identity', 'credential', 'custom_url', 'use_ssl']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_buckets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'provider_id' in params:
            query_params.append(('providerId', params['provider_id']))  # noqa: E501
        if 'identity' in params:
            query_params.append(('identity', params['identity']))  # noqa: E501
        if 'credential' in params:
            query_params.append(('credential', params['credential']))  # noqa: E501
        if 'custom_url' in params:
            query_params.append(('customUrl', params['custom_url']))  # noqa: E501
        if 'use_ssl' in params:
            query_params.append(('useSsl', params['use_ssl']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/rest/buckets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Bucket]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_buckets_for_storage_account(self, storage_account_id, **kwargs):  # noqa: E501
        """Retrieve buckets from external cloud storage account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.request_buckets_for_storage_account(storage_account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int storage_account_id: storage-account-id (required)
        :return: list[Bucket]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.request_buckets_for_storage_account_with_http_info(storage_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.request_buckets_for_storage_account_with_http_info(storage_account_id, **kwargs)  # noqa: E501
            return data

    def request_buckets_for_storage_account_with_http_info(self, storage_account_id, **kwargs):  # noqa: E501
        """Retrieve buckets from external cloud storage account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.request_buckets_for_storage_account_with_http_info(storage_account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int storage_account_id: storage-account-id (required)
        :return: list[Bucket]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_account_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_buckets_for_storage_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_account_id' is set
        if ('storage_account_id' not in params or
                params['storage_account_id'] is None):
            raise ValueError("Missing the required parameter `storage_account_id` when calling `request_buckets_for_storage_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_account_id' in params:
            path_params['storage-account-id'] = params['storage_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/rest/storage-accounts/{storage-account-id}/buckets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Bucket]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
