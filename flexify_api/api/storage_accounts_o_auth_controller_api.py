# coding: utf-8

"""
    Flexify IO User REST API

    + Get API token + Authorize using `Bearer TOKEN` + Enjoy Flexify IO REST API  # noqa: E501

    OpenAPI spec version: 2.14.2
    Contact: info@flexify.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from flexify_api.api_client import ApiClient


class StorageAccountsOAuthControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_config2(self, oauth_provider_id, **kwargs):  # noqa: E501
        """getConfig  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_config2(oauth_provider_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str oauth_provider_id: oauth-provider-id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_config2_with_http_info(oauth_provider_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_config2_with_http_info(oauth_provider_id, **kwargs)  # noqa: E501
            return data

    def get_config2_with_http_info(self, oauth_provider_id, **kwargs):  # noqa: E501
        """getConfig  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_config2_with_http_info(oauth_provider_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str oauth_provider_id: oauth-provider-id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['oauth_provider_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_config2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'oauth_provider_id' is set
        if self.api_client.client_side_validation and ('oauth_provider_id' not in params or
                                                       params['oauth_provider_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `oauth_provider_id` when calling `get_config2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'oauth_provider_id' in params:
            query_params.append(('oauth-provider-id', params['oauth_provider_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/storage-accounts/oauth/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_code1(self, oauth_provider_id, storage_account_name, storage_provider_id, use_ssl, **kwargs):  # noqa: E501
        """getDeviceCode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_code1(oauth_provider_id, storage_account_name, storage_provider_id, use_ssl, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str oauth_provider_id: oauth-provider-id (required)
        :param str storage_account_name: storage-account-name (required)
        :param int storage_provider_id: storage-provider-id (required)
        :param bool use_ssl: use-ssl (required)
        :param str custom_endpoint: custom-endpoint
        :return: OAuth2DeviceCodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_code1_with_http_info(oauth_provider_id, storage_account_name, storage_provider_id, use_ssl, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_code1_with_http_info(oauth_provider_id, storage_account_name, storage_provider_id, use_ssl, **kwargs)  # noqa: E501
            return data

    def get_device_code1_with_http_info(self, oauth_provider_id, storage_account_name, storage_provider_id, use_ssl, **kwargs):  # noqa: E501
        """getDeviceCode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_code1_with_http_info(oauth_provider_id, storage_account_name, storage_provider_id, use_ssl, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str oauth_provider_id: oauth-provider-id (required)
        :param str storage_account_name: storage-account-name (required)
        :param int storage_provider_id: storage-provider-id (required)
        :param bool use_ssl: use-ssl (required)
        :param str custom_endpoint: custom-endpoint
        :return: OAuth2DeviceCodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['oauth_provider_id', 'storage_account_name', 'storage_provider_id', 'use_ssl', 'custom_endpoint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_code1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'oauth_provider_id' is set
        if self.api_client.client_side_validation and ('oauth_provider_id' not in params or
                                                       params['oauth_provider_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `oauth_provider_id` when calling `get_device_code1`")  # noqa: E501
        # verify the required parameter 'storage_account_name' is set
        if self.api_client.client_side_validation and ('storage_account_name' not in params or
                                                       params['storage_account_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_account_name` when calling `get_device_code1`")  # noqa: E501
        # verify the required parameter 'storage_provider_id' is set
        if self.api_client.client_side_validation and ('storage_provider_id' not in params or
                                                       params['storage_provider_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_provider_id` when calling `get_device_code1`")  # noqa: E501
        # verify the required parameter 'use_ssl' is set
        if self.api_client.client_side_validation and ('use_ssl' not in params or
                                                       params['use_ssl'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `use_ssl` when calling `get_device_code1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'custom_endpoint' in params:
            query_params.append(('custom-endpoint', params['custom_endpoint']))  # noqa: E501
        if 'oauth_provider_id' in params:
            query_params.append(('oauth-provider-id', params['oauth_provider_id']))  # noqa: E501
        if 'storage_account_name' in params:
            query_params.append(('storage-account-name', params['storage_account_name']))  # noqa: E501
        if 'storage_provider_id' in params:
            query_params.append(('storage-provider-id', params['storage_provider_id']))  # noqa: E501
        if 'use_ssl' in params:
            query_params.append(('use-ssl', params['use_ssl']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/storage-accounts/oauth/device-code', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuth2DeviceCodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
