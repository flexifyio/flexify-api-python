# coding: utf-8

"""
    Flexify IO User REST API

    + Get API token + Authorize using `Bearer TOKEN` + Enjoy Flexify IO REST API  # noqa: E501

    OpenAPI spec version: 2.12.14
    Contact: info@flexify.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from flexify_api.api_client import ApiClient


class EndpointsControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def attach_accounts(self, endpoint_id, request, **kwargs):  # noqa: E501
        """Attach storage accounts to the endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_accounts(endpoint_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param StorageAccountsRequest request: request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attach_accounts_with_http_info(endpoint_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.attach_accounts_with_http_info(endpoint_id, request, **kwargs)  # noqa: E501
            return data

    def attach_accounts_with_http_info(self, endpoint_id, request, **kwargs):  # noqa: E501
        """Attach storage accounts to the endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_accounts_with_http_info(endpoint_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param StorageAccountsRequest request: request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_id', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `attach_accounts`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `attach_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_id' in params:
            path_params['endpoint-id'] = params['endpoint_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints/{endpoint-id}/storage-accounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attach_buckets(self, endpoint_id, request, virtual_bucket, **kwargs):  # noqa: E501
        """Attach storages to the virtual bucket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_buckets(endpoint_id, request, virtual_bucket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param VirtualBucketStoragesRequest request: request (required)
        :param str virtual_bucket: virtual-bucket (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attach_buckets_with_http_info(endpoint_id, request, virtual_bucket, **kwargs)  # noqa: E501
        else:
            (data) = self.attach_buckets_with_http_info(endpoint_id, request, virtual_bucket, **kwargs)  # noqa: E501
            return data

    def attach_buckets_with_http_info(self, endpoint_id, request, virtual_bucket, **kwargs):  # noqa: E501
        """Attach storages to the virtual bucket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_buckets_with_http_info(endpoint_id, request, virtual_bucket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param VirtualBucketStoragesRequest request: request (required)
        :param str virtual_bucket: virtual-bucket (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_id', 'request', 'virtual_bucket']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_buckets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `attach_buckets`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `attach_buckets`")  # noqa: E501
        # verify the required parameter 'virtual_bucket' is set
        if self.api_client.client_side_validation and ('virtual_bucket' not in params or
                                                       params['virtual_bucket'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtual_bucket` when calling `attach_buckets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_id' in params:
            path_params['endpoint-id'] = params['endpoint_id']  # noqa: E501
        if 'virtual_bucket' in params:
            path_params['virtual-bucket'] = params['virtual_bucket']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints/{endpoint-id}/virtual-buckets/{virtual-bucket}/buckets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_accounts(self, endpoint_id, request, **kwargs):  # noqa: E501
        """Modified all storage accounts to the endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_accounts(endpoint_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param StorageAccountsRequest request: request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_accounts_with_http_info(endpoint_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.change_accounts_with_http_info(endpoint_id, request, **kwargs)  # noqa: E501
            return data

    def change_accounts_with_http_info(self, endpoint_id, request, **kwargs):  # noqa: E501
        """Modified all storage accounts to the endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_accounts_with_http_info(endpoint_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param StorageAccountsRequest request: request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_id', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `change_accounts`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `change_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_id' in params:
            path_params['endpoint-id'] = params['endpoint_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints/{endpoint-id}/storage-accounts', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_buckets(self, endpoint_id, request, virtual_bucket, **kwargs):  # noqa: E501
        """Replaces the list of storages attached to the virtual bucket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_buckets(endpoint_id, request, virtual_bucket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param VirtualBucketStoragesRequest request: request (required)
        :param str virtual_bucket: virtual-bucket (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_buckets_with_http_info(endpoint_id, request, virtual_bucket, **kwargs)  # noqa: E501
        else:
            (data) = self.change_buckets_with_http_info(endpoint_id, request, virtual_bucket, **kwargs)  # noqa: E501
            return data

    def change_buckets_with_http_info(self, endpoint_id, request, virtual_bucket, **kwargs):  # noqa: E501
        """Replaces the list of storages attached to the virtual bucket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_buckets_with_http_info(endpoint_id, request, virtual_bucket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param VirtualBucketStoragesRequest request: request (required)
        :param str virtual_bucket: virtual-bucket (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_id', 'request', 'virtual_bucket']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_buckets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `change_buckets`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `change_buckets`")  # noqa: E501
        # verify the required parameter 'virtual_bucket' is set
        if self.api_client.client_side_validation and ('virtual_bucket' not in params or
                                                       params['virtual_bucket'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtual_bucket` when calling `change_buckets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_id' in params:
            path_params['endpoint-id'] = params['endpoint_id']  # noqa: E501
        if 'virtual_bucket' in params:
            path_params['virtual-bucket'] = params['virtual_bucket']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints/{endpoint-id}/virtual-buckets/{virtual-bucket}/buckets', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_endpoint(self, settings, **kwargs):  # noqa: E501
        """Creates new endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_endpoint(settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EndpointSettings settings: settings (required)
        :return: IdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_endpoint_with_http_info(settings, **kwargs)  # noqa: E501
        else:
            (data) = self.create_endpoint_with_http_info(settings, **kwargs)  # noqa: E501
            return data

    def create_endpoint_with_http_info(self, settings, **kwargs):  # noqa: E501
        """Creates new endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_endpoint_with_http_info(settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EndpointSettings settings: settings (required)
        :return: IdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'settings' is set
        if self.api_client.client_side_validation and ('settings' not in params or
                                                       params['settings'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `settings` when calling `create_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings' in params:
            body_params = params['settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_virtual_bucket(self, endpoint_id, request, **kwargs):  # noqa: E501
        """Creates new virtual bucket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_virtual_bucket(endpoint_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param CreateVirtualBucketRequest request: request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_virtual_bucket_with_http_info(endpoint_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_virtual_bucket_with_http_info(endpoint_id, request, **kwargs)  # noqa: E501
            return data

    def create_virtual_bucket_with_http_info(self, endpoint_id, request, **kwargs):  # noqa: E501
        """Creates new virtual bucket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_virtual_bucket_with_http_info(endpoint_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param CreateVirtualBucketRequest request: request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_id', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_virtual_bucket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `create_virtual_bucket`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `create_virtual_bucket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_id' in params:
            path_params['endpoint-id'] = params['endpoint_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints/{endpoint-id}/virtual-buckets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete(self, endpoint_id, **kwargs):  # noqa: E501
        """Delete the endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete(endpoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_with_http_info(endpoint_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_with_http_info(endpoint_id, **kwargs)  # noqa: E501
            return data

    def delete_with_http_info(self, endpoint_id, **kwargs):  # noqa: E501
        """Delete the endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_with_http_info(endpoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_id' in params:
            path_params['endpoint-id'] = params['endpoint_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints/{endpoint-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_virtual_bucket(self, endpoint_id, virtual_bucket, **kwargs):  # noqa: E501
        """Deletes virtual bucket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_virtual_bucket(endpoint_id, virtual_bucket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param str virtual_bucket: virtual-bucket (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_virtual_bucket_with_http_info(endpoint_id, virtual_bucket, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_virtual_bucket_with_http_info(endpoint_id, virtual_bucket, **kwargs)  # noqa: E501
            return data

    def delete_virtual_bucket_with_http_info(self, endpoint_id, virtual_bucket, **kwargs):  # noqa: E501
        """Deletes virtual bucket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_virtual_bucket_with_http_info(endpoint_id, virtual_bucket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param str virtual_bucket: virtual-bucket (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_id', 'virtual_bucket']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_virtual_bucket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `delete_virtual_bucket`")  # noqa: E501
        # verify the required parameter 'virtual_bucket' is set
        if self.api_client.client_side_validation and ('virtual_bucket' not in params or
                                                       params['virtual_bucket'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtual_bucket` when calling `delete_virtual_bucket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_id' in params:
            path_params['endpoint-id'] = params['endpoint_id']  # noqa: E501
        if 'virtual_bucket' in params:
            path_params['virtual-bucket'] = params['virtual_bucket']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints/{endpoint-id}/virtual-buckets/{virtual-bucket}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detach_account(self, endpoint_id, storage_account_id, **kwargs):  # noqa: E501
        """Detach storage account from the endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_account(endpoint_id, storage_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param int storage_account_id: storage-account-id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detach_account_with_http_info(endpoint_id, storage_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.detach_account_with_http_info(endpoint_id, storage_account_id, **kwargs)  # noqa: E501
            return data

    def detach_account_with_http_info(self, endpoint_id, storage_account_id, **kwargs):  # noqa: E501
        """Detach storage account from the endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_account_with_http_info(endpoint_id, storage_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param int storage_account_id: storage-account-id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_id', 'storage_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detach_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `detach_account`")  # noqa: E501
        # verify the required parameter 'storage_account_id' is set
        if self.api_client.client_side_validation and ('storage_account_id' not in params or
                                                       params['storage_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_account_id` when calling `detach_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_id' in params:
            path_params['endpoint-id'] = params['endpoint_id']  # noqa: E501
        if 'storage_account_id' in params:
            path_params['storage-account-id'] = params['storage_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints/{endpoint-id}/storage-accounts/{storage-account-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detach_bucket(self, bucket_id, endpoint_id, virtual_bucket, **kwargs):  # noqa: E501
        """Detach storage account from the endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_bucket(bucket_id, endpoint_id, virtual_bucket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int bucket_id: bucket-id (required)
        :param int endpoint_id: endpoint-id (required)
        :param str virtual_bucket: virtual-bucket (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detach_bucket_with_http_info(bucket_id, endpoint_id, virtual_bucket, **kwargs)  # noqa: E501
        else:
            (data) = self.detach_bucket_with_http_info(bucket_id, endpoint_id, virtual_bucket, **kwargs)  # noqa: E501
            return data

    def detach_bucket_with_http_info(self, bucket_id, endpoint_id, virtual_bucket, **kwargs):  # noqa: E501
        """Detach storage account from the endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_bucket_with_http_info(bucket_id, endpoint_id, virtual_bucket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int bucket_id: bucket-id (required)
        :param int endpoint_id: endpoint-id (required)
        :param str virtual_bucket: virtual-bucket (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bucket_id', 'endpoint_id', 'virtual_bucket']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detach_bucket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bucket_id' is set
        if self.api_client.client_side_validation and ('bucket_id' not in params or
                                                       params['bucket_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bucket_id` when calling `detach_bucket`")  # noqa: E501
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `detach_bucket`")  # noqa: E501
        # verify the required parameter 'virtual_bucket' is set
        if self.api_client.client_side_validation and ('virtual_bucket' not in params or
                                                       params['virtual_bucket'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtual_bucket` when calling `detach_bucket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bucket_id' in params:
            path_params['bucket-id'] = params['bucket_id']  # noqa: E501
        if 'endpoint_id' in params:
            path_params['endpoint-id'] = params['endpoint_id']  # noqa: E501
        if 'virtual_bucket' in params:
            path_params['virtual-bucket'] = params['virtual_bucket']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints/{endpoint-id}/virtual-buckets/{virtual-bucket}/buckets/{bucket-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def disable(self, endpoint_id, **kwargs):  # noqa: E501
        """Disable the endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable(endpoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.disable_with_http_info(endpoint_id, **kwargs)  # noqa: E501
        else:
            (data) = self.disable_with_http_info(endpoint_id, **kwargs)  # noqa: E501
            return data

    def disable_with_http_info(self, endpoint_id, **kwargs):  # noqa: E501
        """Disable the endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_with_http_info(endpoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `disable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_id' in params:
            path_params['endpoint-id'] = params['endpoint_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints/{endpoint-id}/actions/disable', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enable(self, endpoint_id, **kwargs):  # noqa: E501
        """Enable the endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable(endpoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enable_with_http_info(endpoint_id, **kwargs)  # noqa: E501
        else:
            (data) = self.enable_with_http_info(endpoint_id, **kwargs)  # noqa: E501
            return data

    def enable_with_http_info(self, endpoint_id, **kwargs):  # noqa: E501
        """Enable the endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_with_http_info(endpoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `enable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_id' in params:
            path_params['endpoint-id'] = params['endpoint_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints/{endpoint-id}/actions/enable', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_access_keys(self, **kwargs):  # noqa: E501
        """Generate new access keys pair  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_access_keys(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AccessKeysPair
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_access_keys_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.generate_access_keys_with_http_info(**kwargs)  # noqa: E501
            return data

    def generate_access_keys_with_http_info(self, **kwargs):  # noqa: E501
        """Generate new access keys pair  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_access_keys_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AccessKeysPair
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_access_keys" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints/generated-access-keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessKeysPair',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_endpoint_details(self, endpoint_id, **kwargs):  # noqa: E501
        """Get endpoint details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_endpoint_details(endpoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :return: EndpointDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_endpoint_details_with_http_info(endpoint_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_endpoint_details_with_http_info(endpoint_id, **kwargs)  # noqa: E501
            return data

    def get_endpoint_details_with_http_info(self, endpoint_id, **kwargs):  # noqa: E501
        """Get endpoint details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_endpoint_details_with_http_info(endpoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :return: EndpointDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_endpoint_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `get_endpoint_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_id' in params:
            path_params['endpoint-id'] = params['endpoint_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints/{endpoint-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_endpoints_for_current_user(self, **kwargs):  # noqa: E501
        """Get the list of endpoints for current user optionally filtering by name using SQL LIKE syntax  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_endpoints_for_current_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: name
        :return: list[EndpointDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_endpoints_for_current_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_endpoints_for_current_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_endpoints_for_current_user_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of endpoints for current user optionally filtering by name using SQL LIKE syntax  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_endpoints_for_current_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: name
        :return: list[EndpointDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_endpoints_for_current_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EndpointDetails]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_attached_account_settings(self, endpoint_id, settings, storage_account_id, **kwargs):  # noqa: E501
        """Modifies settings of the attached storage account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_attached_account_settings(endpoint_id, settings, storage_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param EndpointStorageAccountSettings settings: settings (required)
        :param int storage_account_id: storage-account-id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_attached_account_settings_with_http_info(endpoint_id, settings, storage_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_attached_account_settings_with_http_info(endpoint_id, settings, storage_account_id, **kwargs)  # noqa: E501
            return data

    def set_attached_account_settings_with_http_info(self, endpoint_id, settings, storage_account_id, **kwargs):  # noqa: E501
        """Modifies settings of the attached storage account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_attached_account_settings_with_http_info(endpoint_id, settings, storage_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param EndpointStorageAccountSettings settings: settings (required)
        :param int storage_account_id: storage-account-id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_id', 'settings', 'storage_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_attached_account_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `set_attached_account_settings`")  # noqa: E501
        # verify the required parameter 'settings' is set
        if self.api_client.client_side_validation and ('settings' not in params or
                                                       params['settings'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `settings` when calling `set_attached_account_settings`")  # noqa: E501
        # verify the required parameter 'storage_account_id' is set
        if self.api_client.client_side_validation and ('storage_account_id' not in params or
                                                       params['storage_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_account_id` when calling `set_attached_account_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_id' in params:
            path_params['endpoint-id'] = params['endpoint_id']  # noqa: E501
        if 'storage_account_id' in params:
            path_params['storage-account-id'] = params['storage_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings' in params:
            body_params = params['settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints/{endpoint-id}/storage-accounts/{storage-account-id}/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_attached_bucket_settings(self, bucket_id, endpoint_id, settings, virtual_bucket, **kwargs):  # noqa: E501
        """Modifies settings of the attached storage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_attached_bucket_settings(bucket_id, endpoint_id, settings, virtual_bucket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int bucket_id: bucket-id (required)
        :param int endpoint_id: endpoint-id (required)
        :param VirtualBucketStorageSettings settings: settings (required)
        :param str virtual_bucket: virtual-bucket (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_attached_bucket_settings_with_http_info(bucket_id, endpoint_id, settings, virtual_bucket, **kwargs)  # noqa: E501
        else:
            (data) = self.set_attached_bucket_settings_with_http_info(bucket_id, endpoint_id, settings, virtual_bucket, **kwargs)  # noqa: E501
            return data

    def set_attached_bucket_settings_with_http_info(self, bucket_id, endpoint_id, settings, virtual_bucket, **kwargs):  # noqa: E501
        """Modifies settings of the attached storage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_attached_bucket_settings_with_http_info(bucket_id, endpoint_id, settings, virtual_bucket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int bucket_id: bucket-id (required)
        :param int endpoint_id: endpoint-id (required)
        :param VirtualBucketStorageSettings settings: settings (required)
        :param str virtual_bucket: virtual-bucket (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bucket_id', 'endpoint_id', 'settings', 'virtual_bucket']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_attached_bucket_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bucket_id' is set
        if self.api_client.client_side_validation and ('bucket_id' not in params or
                                                       params['bucket_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bucket_id` when calling `set_attached_bucket_settings`")  # noqa: E501
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `set_attached_bucket_settings`")  # noqa: E501
        # verify the required parameter 'settings' is set
        if self.api_client.client_side_validation and ('settings' not in params or
                                                       params['settings'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `settings` when calling `set_attached_bucket_settings`")  # noqa: E501
        # verify the required parameter 'virtual_bucket' is set
        if self.api_client.client_side_validation and ('virtual_bucket' not in params or
                                                       params['virtual_bucket'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtual_bucket` when calling `set_attached_bucket_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bucket_id' in params:
            path_params['bucket-id'] = params['bucket_id']  # noqa: E501
        if 'endpoint_id' in params:
            path_params['endpoint-id'] = params['endpoint_id']  # noqa: E501
        if 'virtual_bucket' in params:
            path_params['virtual-bucket'] = params['virtual_bucket']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings' in params:
            body_params = params['settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints/{endpoint-id}/virtual-buckets/{virtual-bucket}/buckets/{bucket-id}/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_virtual_bucket_settings(self, endpoint_id, settings, virtual_bucket, **kwargs):  # noqa: E501
        """Modifies virtual bucket configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_virtual_bucket_settings(endpoint_id, settings, virtual_bucket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param VirtualBucketSettings settings: settings (required)
        :param str virtual_bucket: virtual-bucket (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_virtual_bucket_settings_with_http_info(endpoint_id, settings, virtual_bucket, **kwargs)  # noqa: E501
        else:
            (data) = self.set_virtual_bucket_settings_with_http_info(endpoint_id, settings, virtual_bucket, **kwargs)  # noqa: E501
            return data

    def set_virtual_bucket_settings_with_http_info(self, endpoint_id, settings, virtual_bucket, **kwargs):  # noqa: E501
        """Modifies virtual bucket configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_virtual_bucket_settings_with_http_info(endpoint_id, settings, virtual_bucket, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param VirtualBucketSettings settings: settings (required)
        :param str virtual_bucket: virtual-bucket (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_id', 'settings', 'virtual_bucket']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_virtual_bucket_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `set_virtual_bucket_settings`")  # noqa: E501
        # verify the required parameter 'settings' is set
        if self.api_client.client_side_validation and ('settings' not in params or
                                                       params['settings'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `settings` when calling `set_virtual_bucket_settings`")  # noqa: E501
        # verify the required parameter 'virtual_bucket' is set
        if self.api_client.client_side_validation and ('virtual_bucket' not in params or
                                                       params['virtual_bucket'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `virtual_bucket` when calling `set_virtual_bucket_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_id' in params:
            path_params['endpoint-id'] = params['endpoint_id']  # noqa: E501
        if 'virtual_bucket' in params:
            path_params['virtual-bucket'] = params['virtual_bucket']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings' in params:
            body_params = params['settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints/{endpoint-id}/virtual-buckets/{virtual-bucket}/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_endpoint_settings(self, endpoint_id, settings, **kwargs):  # noqa: E501
        """Update attributes of the endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_endpoint_settings(endpoint_id, settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param EndpointSettings settings: settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_endpoint_settings_with_http_info(endpoint_id, settings, **kwargs)  # noqa: E501
        else:
            (data) = self.update_endpoint_settings_with_http_info(endpoint_id, settings, **kwargs)  # noqa: E501
            return data

    def update_endpoint_settings_with_http_info(self, endpoint_id, settings, **kwargs):  # noqa: E501
        """Update attributes of the endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_endpoint_settings_with_http_info(endpoint_id, settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int endpoint_id: endpoint-id (required)
        :param EndpointSettings settings: settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_id', 'settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_endpoint_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `update_endpoint_settings`")  # noqa: E501
        # verify the required parameter 'settings' is set
        if self.api_client.client_side_validation and ('settings' not in params or
                                                       params['settings'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `settings` when calling `update_endpoint_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_id' in params:
            path_params['endpoint-id'] = params['endpoint_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings' in params:
            body_params = params['settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/backend/rest/endpoints/{endpoint-id}/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
